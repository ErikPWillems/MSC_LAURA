merged_list$FPED$DR1T_ADD_SUGARS_GRAM <- NULL
merged_list$FPED$DR1T_ADD_SUGARS_GRAM  <- merged_list$FPED$DR1T_ADD_SUGARS * DR1T_ADD_SUGARS_CONVERTER
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_ADD_SUGARS_GRAM  , .after = DR1T_ADD_SUGARS)
attr(merged_list$FPED$DR1T_ADD_SUGARS_GRAM  , "label") <- "Foods defined as added sugars (grams)"
str(merged_list$FPED)
# Columns to sum up
columns_to_sum <- c("DR1T_F_TOTAL_GRAM", "DR1T_V_DRKGR_GRAM", "DR1T_V_REDOR_TOTAL_GRAM",
"DR1T_V_STARCHY_TOTAL_GRAM", "DR1T_V_OTHER_GRAM", "DR1T_PF_LEGUMES_GRAM",
"DR1T_G_WHOLE_GRAM", "DR1T_PF_MEAT_GRAM", "DR1T_PF_CUREDMEAT_GRAM",
"DR1T_PF_ORGAN_GRAM", "DR1T_PF_POULT_GRAM", "DR1T_PF_SEAFD_HI_GRAM",
"DR1T_PF_SEAFD_LOW_GRAM", "DR1T_PF_EGGS_GRAM", "DR1T_PF_NUTSDS_GRAM",
"DR1T_D_TOTAL_GRAM", "DR1T_OILS", "DR1T_SOLID_FATS", "DR1T_ADD_SUGARS_GRAM")
# Perform the sum
total_per_day <- rowSums(merged_list$FPED[, columns_to_sum], na.rm = TRUE)
# Add the new variable to the tibble
merged_list$FPED <- cbind(merged_list$FPED, DR1T_Total_Grams_Per_Day = total_per_day)
attr(merged_list$FPED$DR1T_Total_Grams_Per_Day  , "label") <- "Total grams consumed per day (grams)"
str(merged_list$FPED)
summary(merged_list$FPED$DR1T_Total_Grams_Per_Day, na.rm = T)
merged_list$FPED <- merged_list$FPED %>%
mutate(DR1T_Total_Non_starchy_Veggies = DR1T_V_DRKGR_GRAM +  DR1T_V_REDOR_TOTAL_GRAM+ DR1T_V_OTHER_GRAM)
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_Total_Non_starchy_Veggies  , .after = DR1T_V_TOTAL_GRAM)
attr(merged_list$FPED$DR1T_Total_Non_starchy_Veggies  , "label") <- "Total non starchy veggies consumed (grams)"
merged_list$FPED <- merged_list$FPED %>%
mutate(DR1T_Total_Seafood_Sub = DR1T_PF_SEAFD_HI_GRAM +  DR1T_PF_SEAFD_LOW_GRAM)
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_Total_Seafood_Sub , .after = DR1T_PF_SEAFD_LOW_GRAM)
attr(merged_list$FPED$DR1T_Total_Seafood_Sub  , "label") <- "Total Seafood and Substitutes consumed (grams)"
merged_list$FPED <- merged_list$FPED %>%
mutate(DR1T_Total_Red_Processed_Meat =  DR1T_PF_MEAT_GRAM+ DR1T_PF_CUREDMEAT_GRAM + DR1T_PF_ORGAN_GRAM )
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_Total_Red_Processed_Meat, .after = DR1T_PF_ORGAN_GRAM)
attr(merged_list$FPED$DR1T_Total_Red_Processed_Meat  , "label") <- "Total red and processed meats consumed (grams)"
str(merged_list$FPED)
# Check if the food code exists in the variable, and change the food code number every time
if (any(25230450%in% merged_list$FPED_IND$DR1IFDCD)) {
print(" exists in the variable")
} else {
print(" does not exist in the variable")
}
# Find the rows where the Food code number 61201010 is present in the column
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.1/100)
str(rows_with_food_code)
if (merged_list$FPED$SEQN == rows_with_food_code$SEQN) {
merged_list$FPED$DR1T_ADD_SUGARS = merged_list$FPED$DR1T_ADD_SUGARS + rows_with_food_code$DR1I_ADD_SUGARS
}
# Find the rows where the Food code number 61201010 is present in the column
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.1/100)
str(rows_with_food_code)
if (merged_list$FPED$SEQN == rows_with_food_code$SEQN) {
merged_list$FPED$DR1T_ADD_SUGARS = merged_list$FPED$DR1T_ADD_SUGARS + rows_with_food_code$DR1I_ADD_SUGARS
}
for (i in 1:nrow(rows_with_food_code)) {
seqn <- rows_with_food_code[i, "SEQN"]
merged_list$FPED$DR1T_ADD_SUGARS_GRAM[merged_list$FPED$SEQN == seqn] <-
merged_list$FPED$DR1T_ADD_SUGARS_GRAM[merged_list$FPED$SEQN == seqn] + rows_with_food_code[i, "DR1I_ADD_SUGARS"]
}
for (i in 1:ncol(rows_with_food_code)) {
seqn <- rows_with_food_code[i, "SEQN"]
merged_list$FPED$DR1T_ADD_SUGARS_GRAM[merged_list$FPED$SEQN == seqn] <-
merged_list$FPED$DR1T_ADD_SUGARS_GRAM[merged_list$FPED$SEQN == seqn] + rows_with_food_code[i, "DR1I_ADD_SUGARS"]
}
View(rows_with_food_code)
#the following code is probably best put into a function! But here I get error messages because the list I would need is the merged_list$FPED.
#the maximal and minimum scores you can get in each category
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5 #ratio components
#the upper and lower limit(s) for every variable are percentages of total grams eaten that day of one participant
PHDI_Nuts_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Nuts_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_max = 0.085 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_max = 0.101 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_max = 0.152* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_max = 0.25 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_max = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min2 = 0.253 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_max = 0.126 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min1 = 0* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min2 = 0.04* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_max = 0.02 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_min = 0.013 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_min = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_min = 0.29 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_max = 0.015 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_min = 0.006 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_max = 0.003 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_min = 0.016 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_max = 0.008 * merged_list$FPED$DR1T_Total_Grams_Per_Day
# three functions, one for adequacy components, once for optimum components and once for moderation components
SCORE_ADEQUACY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv == min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_MODERATION = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
#if the actual serving size is between the min_serv1 and the max_serv, then we need another equation than when actual_serv is between max_serv and min_serv2
SCORE_OPTIMUM = function(actual_serv, min_serv1, min_serv2, max_serv, min_score, max_score) {
case_when(
actual_serv == max_serv ~ max_score,
actual_serv == min_serv1 ~ min_score,
actual_serv >= min_serv2 ~ min_score,
actual_serv < max_serv ~ ((min_score + (actual_serv - min_serv1) * max_score) / (max_serv - min_serv1)),
TRUE ~  min_score + (actual_serv - min_serv2) * max_score / (max_serv - min_serv2)
)
}
#  Ratio components?
# Dark green vegetables (grams) / Total red and orange vegetables (tomatoes + other red and orange) (grams) + Other vegetables not in the vegetable components listed above (grams)
#  DR1T_V_DRKGR_GRAM / DR1T_V_REDOR_TOTAL_GRAM  + DR1T_V_OTHER_GRAM
# and the same is true for the red veggies --> red veggies / all other non starchy veggies
SCORE_RATIO = function(green_veg, red_veg, other_veg, min_score, max_score) {
ratio = (green_veg / (red_veg + other_veg))*100
case_when(
ratio == 33.3 ~ max_score,
ratio < 33.3 ~ pmax((ratio / 33.3) * max_score, min_score),
ratio > 33.3 ~ pmax(((100 - ratio) / (100 - 33.3)) * max_score, min_score)
)
}
#Adequacy components
PHDI_Nuts_and_Peanuts = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_NUTSDS_GRAM, PHDI_Nuts_min, PHDI_Nuts_max, PHDI_MIN, PHDI_MAX)
PHDI_Legumes = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_LEGUMES_GRAM, PHDI_Legumes_min, PHDI_Legumes_max, PHDI_MIN, PHDI_MAX)
PHDI_Fruits = SCORE_ADEQUACY(merged_list$FPED$DR1T_F_TOTAL_GRAM, PHDI_Fruits_min, PHDI_Fruits_max, PHDI_MIN, PHDI_MAX)
PHDI_NS_Veggies = SCORE_ADEQUACY(merged_list$FPED$DR1T_Total_Non_starchy_Veggies, PHDI_NS_Veg_min, PHDI_NS_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Whole_Grains = SCORE_ADEQUACY(merged_list$FPED$DR1T_G_WHOLE_GRAM, PHDI_W_Grains_min, PHDI_W_Grains_max, PHDI_MIN, PHDI_MAX)
#Optimum components
PHDI_Seafood_Sub = SCORE_OPTIMUM(merged_list$FPED$DR1T_Total_Seafood_Sub, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
PHDI_Starchy_Veggies = SCORE_OPTIMUM(merged_list$FPED$DR1T_V_STARCHY_TOTAL_GRAM, PHDI_ST_Veg_min1, PHDI_ST_Veg_min2, PHDI_ST_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Dairy = SCORE_OPTIMUM(merged_list$FPED$DR1T_D_TOTAL_GRAM, PHDI_Dairy_min1, PHDI_Dairy_min2, PHDI_Dairy_max, PHDI_MIN, PHDI_MAX)
PHDI_Unsaturated_Oils = SCORE_OPTIMUM(merged_list$FPED$DR1T_OILS, PHDI_UNS_Oils_min1, PHDI_UNS_Oils_min2, PHDI_UNS_Oils_max, PHDI_MIN, PHDI_MAX)
#Ratio components
PHDI_DGV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
PHDI_ReV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
#Moderation compnents
PHDI_Eggs = SCORE_MODERATION(merged_list$FPED$DR1T_PF_EGGS_GRAM, PHDI_Eggs_min, PHDI_Eggs_max, PHDI_MIN, PHDI_MAX)
PHDI_Red_Proc_Meat = SCORE_MODERATION(merged_list$FPED$DR1T_Total_Red_Processed_Meat, PHDI_RP_Meat_min, PHDI_RP_Meat_max, PHDI_MIN, PHDI_MAX)
PHDI_Poultry = SCORE_MODERATION(merged_list$FPED$DR1T_PF_POULT_GRAM, PHDI_Poultry_min, PHDI_Poultry_max, PHDI_MIN, PHDI_MAX)
PHDI_Saturated_Fats = SCORE_MODERATION(merged_list$FPED$DR1T_SOLID_FATS, PHDI_Sat_Fats_min, PHDI_Sat_Fats_max, PHDI_MIN, PHDI_MAX)
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
SCORE_MODERATION = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
PHDI_Add_Sugars_min = 0.016 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_max = 0.008 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
View(merged_list)
DR1T_ADD_SUGARS_CONVERTER <- 6.08
merged_list$FPED$DR1T_ADD_SUGARS_GRAM <- NULL
merged_list$FPED$DR1T_ADD_SUGARS_GRAM  <- merged_list$FPED$DR1T_ADD_SUGARS * DR1T_ADD_SUGARS_CONVERTER
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_ADD_SUGARS_GRAM  , .after = DR1T_ADD_SUGARS)
attr(merged_list$FPED$DR1T_ADD_SUGARS_GRAM  , "label") <- "Foods defined as added sugars (grams)"
str(merged_list$FPED)
View(merged_list)
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
if (PHDI_Nuts_and_Peanuts > 10) {
Excess_Nuts = merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM - merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM * PHDI_Nuts_max
PHDI_Seafood_Sub = PHDI_Seafood_Sub + Excess_Nuts
}
if (PHDI_Nuts_and_Peanuts > 10) {
Excess_Nuts = merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM - merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM * PHDI_Nuts_max
PHDI_Seafood_Sub = PHDI_Seafood_Sub + Excess_Nuts
}
if (PHDI_Nuts_and_Peanuts > 10) {
Excess_Nuts = merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM - merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM * PHDI_Nuts_max
PHDI_Seafood_Sub = PHDI_Seafood_Sub + Excess_Nuts
}
if (PHDI_Nuts_and_Peanuts > 10)
for (value in PHDI_Nuts_and_Peanuts) {
if (value > 10) {
Excess_Nuts = merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM - merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM * PHDI_Nuts_max
PHDI_Seafood_Sub = PHDI_Seafood_Sub + Excess_Nuts
}
}
PHDI_Nuts_and_Peanuts <- as.list(PHDI_Nuts_and_Peanuts)
for (value in PHDI_Nuts_and_Peanuts) {
if (value > 10) {
Excess_Nuts = merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM - merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM * PHDI_Nuts_max
PHDI_Seafood_Sub = PHDI_Seafood_Sub + Excess_Nuts
}
}
PHDI_Nuts_and_Peanuts <- as.list(PHDI_Nuts_and_Peanuts)
for (value in PHDI_Nuts_and_Peanuts) {
if (!is.na(value) && is.numeric(value) && value > 10) {
total_gram <- as.numeric(merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM)
Excess_Nuts <- total_gram - total_gram * PHDI_Nuts_max
PHDI_Seafood_Sub <- PHDI_Seafood_Sub + Excess_Nuts
}
}
PHDI_Legumes <- as.list(PHDI_Legumes)
for (value in PHDI_Legumes){
if (!is.na(value) && is.numeric(value) && value > 10) {
total_gram <- as.numeric(merged_list$FPED$DR1T_PF_LEGUMES_GRAM)
Excess_Legumes = merged_list$FPED$DR1T_PF_LEGUMES_GRAM - merged_list$FPED$DR1T_PF_LEGUMES_GRAM * PHDI_Legumes_max
PHDI_Seafood_Sub = PHDI_Seafood_Sub + Excess_Legumes
}
}
PHDI_all_D1 = PHDI_Nuts_and_Peanuts + PHDI_Legumes + PHDI_Fruits + PHDI_NS_Veggies+PHDI_Whole_Grains+PHDI_Seafood_Sub+PHDI_Starchy_Veggies+PHDI_Dairy+PHDI_Unsaturated_Oils+PHDI_DGV_Ratio+PHDI_ReV_Ratio+PHDI_Eggs+PHDI_Red_Proc_Meat+PHDI_Poultry+PHDI_Saturated_Fats+PHDI_Added_Sugars
# Find the rows where the Food code number 61201010 is present in the column
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.1/100)
str(rows_with_food_code)
if (merged_list$FPED$SEQN == rows_with_food_code$SEQN) {
merged_list$FPED$DR1T_ADD_SUGARS = merged_list$FPED$DR1T_ADD_SUGARS + rows_with_food_code$DR1I_ADD_SUGARS
}
# Find the rows where the Food code number 61201010 is present in the column
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.1/100)
str(rows_with_food_code)
for (i in 1:ncol(rows_with_food_code)) {
seqn <- rows_with_food_code[i, "SEQN"]
merged_list$FPED$DR1T_ADD_SUGARS_GRAM[merged_list$FPED$SEQN == seqn] <-
merged_list$FPED$DR1T_ADD_SUGARS_GRAM[merged_list$FPED$SEQN == seqn] + rows_with_food_code[i, "DR1I_ADD_SUGARS"]
}
#the following code is probably best put into a function! But here I get error messages because the list I would need is the merged_list$FPED.
#the maximal and minimum scores you can get in each category
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5 #ratio components
#the upper and lower limit(s) for every variable are percentages of total grams eaten that day of one participant
PHDI_Nuts_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Nuts_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_max = 0.085 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_max = 0.101 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_max = 0.152* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_max = 0.25 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_max = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min2 = 0.253 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_max = 0.126 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min1 = 0* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min2 = 0.04* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_max = 0.02 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_min = 0.013 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_min = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_min = 0.29 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_max = 0.015 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_min = 0.006 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_max = 0.003 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_min = 0.016 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_max = 0.008 * merged_list$FPED$DR1T_Total_Grams_Per_Day
# three functions, one for adequacy components, once for optimum components and once for moderation components
SCORE_ADEQUACY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv == min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_MODERATION = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
#if the actual serving size is between the min_serv1 and the max_serv, then we need another equation than when actual_serv is between max_serv and min_serv2
SCORE_OPTIMUM = function(actual_serv, min_serv1, min_serv2, max_serv, min_score, max_score) {
case_when(
actual_serv == max_serv ~ max_score,
actual_serv == min_serv1 ~ min_score,
actual_serv >= min_serv2 ~ min_score,
actual_serv < max_serv ~ ((min_score + (actual_serv - min_serv1) * max_score) / (max_serv - min_serv1)),
TRUE ~  min_score + (actual_serv - min_serv2) * max_score / (max_serv - min_serv2)
)
}
#  Ratio components?
# Dark green vegetables (grams) / Total red and orange vegetables (tomatoes + other red and orange) (grams) + Other vegetables not in the vegetable components listed above (grams)
#  DR1T_V_DRKGR_GRAM / DR1T_V_REDOR_TOTAL_GRAM  + DR1T_V_OTHER_GRAM
# and the same is true for the red veggies --> red veggies / all other non starchy veggies
SCORE_RATIO = function(green_veg, red_veg, other_veg, min_score, max_score) {
ratio = (green_veg / (red_veg + other_veg))*100
case_when(
ratio == 33.3 ~ max_score,
ratio < 33.3 ~ pmax((ratio / 33.3) * max_score, min_score),
ratio > 33.3 ~ pmax(((100 - ratio) / (100 - 33.3)) * max_score, min_score)
)
}
#Adequacy components
PHDI_Nuts_and_Peanuts = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_NUTSDS_GRAM, PHDI_Nuts_min, PHDI_Nuts_max, PHDI_MIN, PHDI_MAX)
PHDI_Legumes = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_LEGUMES_GRAM, PHDI_Legumes_min, PHDI_Legumes_max, PHDI_MIN, PHDI_MAX)
PHDI_Fruits = SCORE_ADEQUACY(merged_list$FPED$DR1T_F_TOTAL_GRAM, PHDI_Fruits_min, PHDI_Fruits_max, PHDI_MIN, PHDI_MAX)
PHDI_NS_Veggies = SCORE_ADEQUACY(merged_list$FPED$DR1T_Total_Non_starchy_Veggies, PHDI_NS_Veg_min, PHDI_NS_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Whole_Grains = SCORE_ADEQUACY(merged_list$FPED$DR1T_G_WHOLE_GRAM, PHDI_W_Grains_min, PHDI_W_Grains_max, PHDI_MIN, PHDI_MAX)
#Optimum components
PHDI_Seafood_Sub = SCORE_OPTIMUM(merged_list$FPED$DR1T_Total_Seafood_Sub, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
PHDI_Starchy_Veggies = SCORE_OPTIMUM(merged_list$FPED$DR1T_V_STARCHY_TOTAL_GRAM, PHDI_ST_Veg_min1, PHDI_ST_Veg_min2, PHDI_ST_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Dairy = SCORE_OPTIMUM(merged_list$FPED$DR1T_D_TOTAL_GRAM, PHDI_Dairy_min1, PHDI_Dairy_min2, PHDI_Dairy_max, PHDI_MIN, PHDI_MAX)
PHDI_Unsaturated_Oils = SCORE_OPTIMUM(merged_list$FPED$DR1T_OILS, PHDI_UNS_Oils_min1, PHDI_UNS_Oils_min2, PHDI_UNS_Oils_max, PHDI_MIN, PHDI_MAX)
#Ratio components
PHDI_DGV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
PHDI_ReV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
#Moderation compnents
PHDI_Eggs = SCORE_MODERATION(merged_list$FPED$DR1T_PF_EGGS_GRAM, PHDI_Eggs_min, PHDI_Eggs_max, PHDI_MIN, PHDI_MAX)
PHDI_Red_Proc_Meat = SCORE_MODERATION(merged_list$FPED$DR1T_Total_Red_Processed_Meat, PHDI_RP_Meat_min, PHDI_RP_Meat_max, PHDI_MIN, PHDI_MAX)
PHDI_Poultry = SCORE_MODERATION(merged_list$FPED$DR1T_PF_POULT_GRAM, PHDI_Poultry_min, PHDI_Poultry_max, PHDI_MIN, PHDI_MAX)
PHDI_Saturated_Fats = SCORE_MODERATION(merged_list$FPED$DR1T_SOLID_FATS, PHDI_Sat_Fats_min, PHDI_Sat_Fats_max, PHDI_MIN, PHDI_MAX)
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
DR1T_ADD_SUGARS_CONVERTER <- 6.08
merged_list$FPED$DR1T_ADD_SUGARS_GRAM <- NULL
merged_list$FPED$DR1T_ADD_SUGARS_GRAM  <- merged_list$FPED$DR1T_ADD_SUGARS * DR1T_ADD_SUGARS_CONVERTER
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_ADD_SUGARS_GRAM  , .after = DR1T_ADD_SUGARS)
attr(merged_list$FPED$DR1T_ADD_SUGARS_GRAM  , "label") <- "Foods defined as added sugars (grams)"
str(merged_list$FPED)
#the following code is probably best put into a function! But here I get error messages because the list I would need is the merged_list$FPED.
#the maximal and minimum scores you can get in each category
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5 #ratio components
#the upper and lower limit(s) for every variable are percentages of total grams eaten that day of one participant
PHDI_Nuts_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Nuts_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_max = 0.085 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_max = 0.101 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_max = 0.152* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_max = 0.25 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_max = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min2 = 0.253 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_max = 0.126 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min1 = 0* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min2 = 0.04* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_max = 0.02 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_min = 0.013 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_min = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_min = 0.29 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_max = 0.015 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_min = 0.006 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_max = 0.003 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_min = 0.016 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_max = 0.008 * merged_list$FPED$DR1T_Total_Grams_Per_Day
# three functions, one for adequacy components, once for optimum components and once for moderation components
SCORE_ADEQUACY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv == min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_MODERATION = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
#if the actual serving size is between the min_serv1 and the max_serv, then we need another equation than when actual_serv is between max_serv and min_serv2
SCORE_OPTIMUM = function(actual_serv, min_serv1, min_serv2, max_serv, min_score, max_score) {
case_when(
actual_serv == max_serv ~ max_score,
actual_serv == min_serv1 ~ min_score,
actual_serv >= min_serv2 ~ min_score,
actual_serv < max_serv ~ ((min_score + (actual_serv - min_serv1) * max_score) / (max_serv - min_serv1)),
TRUE ~  min_score + (actual_serv - min_serv2) * max_score / (max_serv - min_serv2)
)
}
#  Ratio components?
# Dark green vegetables (grams) / Total red and orange vegetables (tomatoes + other red and orange) (grams) + Other vegetables not in the vegetable components listed above (grams)
#  DR1T_V_DRKGR_GRAM / DR1T_V_REDOR_TOTAL_GRAM  + DR1T_V_OTHER_GRAM
# and the same is true for the red veggies --> red veggies / all other non starchy veggies
SCORE_RATIO = function(green_veg, red_veg, other_veg, min_score, max_score) {
ratio = (green_veg / (red_veg + other_veg))*100
case_when(
ratio == 33.3 ~ max_score,
ratio < 33.3 ~ pmax((ratio / 33.3) * max_score, min_score),
ratio > 33.3 ~ pmax(((100 - ratio) / (100 - 33.3)) * max_score, min_score)
)
}
#Adequacy components
PHDI_Nuts_and_Peanuts = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_NUTSDS_GRAM, PHDI_Nuts_min, PHDI_Nuts_max, PHDI_MIN, PHDI_MAX)
PHDI_Legumes = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_LEGUMES_GRAM, PHDI_Legumes_min, PHDI_Legumes_max, PHDI_MIN, PHDI_MAX)
PHDI_Fruits = SCORE_ADEQUACY(merged_list$FPED$DR1T_F_TOTAL_GRAM, PHDI_Fruits_min, PHDI_Fruits_max, PHDI_MIN, PHDI_MAX)
PHDI_NS_Veggies = SCORE_ADEQUACY(merged_list$FPED$DR1T_Total_Non_starchy_Veggies, PHDI_NS_Veg_min, PHDI_NS_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Whole_Grains = SCORE_ADEQUACY(merged_list$FPED$DR1T_G_WHOLE_GRAM, PHDI_W_Grains_min, PHDI_W_Grains_max, PHDI_MIN, PHDI_MAX)
#Optimum components
PHDI_Seafood_Sub = SCORE_OPTIMUM(merged_list$FPED$DR1T_Total_Seafood_Sub, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
PHDI_Starchy_Veggies = SCORE_OPTIMUM(merged_list$FPED$DR1T_V_STARCHY_TOTAL_GRAM, PHDI_ST_Veg_min1, PHDI_ST_Veg_min2, PHDI_ST_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Dairy = SCORE_OPTIMUM(merged_list$FPED$DR1T_D_TOTAL_GRAM, PHDI_Dairy_min1, PHDI_Dairy_min2, PHDI_Dairy_max, PHDI_MIN, PHDI_MAX)
PHDI_Unsaturated_Oils = SCORE_OPTIMUM(merged_list$FPED$DR1T_OILS, PHDI_UNS_Oils_min1, PHDI_UNS_Oils_min2, PHDI_UNS_Oils_max, PHDI_MIN, PHDI_MAX)
#Ratio components
PHDI_DGV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
PHDI_ReV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
#Moderation compnents
PHDI_Eggs = SCORE_MODERATION(merged_list$FPED$DR1T_PF_EGGS_GRAM, PHDI_Eggs_min, PHDI_Eggs_max, PHDI_MIN, PHDI_MAX)
PHDI_Red_Proc_Meat = SCORE_MODERATION(merged_list$FPED$DR1T_Total_Red_Processed_Meat, PHDI_RP_Meat_min, PHDI_RP_Meat_max, PHDI_MIN, PHDI_MAX)
PHDI_Poultry = SCORE_MODERATION(merged_list$FPED$DR1T_PF_POULT_GRAM, PHDI_Poultry_min, PHDI_Poultry_max, PHDI_MIN, PHDI_MAX)
PHDI_Saturated_Fats = SCORE_MODERATION(merged_list$FPED$DR1T_SOLID_FATS, PHDI_Sat_Fats_min, PHDI_Sat_Fats_max, PHDI_MIN, PHDI_MAX)
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
PHDI_Nuts_and_Peanuts <- as.list(PHDI_Nuts_and_Peanuts)
for (value in PHDI_Nuts_and_Peanuts) {
if (!is.na(value) && is.numeric(value) && value > 10) {
total_gram <- as.numeric(merged_list$FPED$DR1T_PF_MPS_TOTAL_GRAM)
Excess_Nuts <- total_gram - total_gram * PHDI_Nuts_max
PHDI_Seafood_Sub <- PHDI_Seafood_Sub + Excess_Nuts
}
}
PHDI_Legumes <- as.list(PHDI_Legumes)
for (value in PHDI_Legumes){
if (!is.na(value) && is.numeric(value) && value > 10) {
total_gram <- as.numeric(merged_list$FPED$DR1T_PF_LEGUMES_GRAM)
Excess_Legumes = merged_list$FPED$DR1T_PF_LEGUMES_GRAM - merged_list$FPED$DR1T_PF_LEGUMES_GRAM * PHDI_Legumes_max
PHDI_Seafood_Sub = PHDI_Seafood_Sub + Excess_Legumes
}
}
PHDI_all_D1 = PHDI_Nuts_and_Peanuts + PHDI_Legumes + PHDI_Fruits + PHDI_NS_Veggies+PHDI_Whole_Grains+PHDI_Seafood_Sub+PHDI_Starchy_Veggies+PHDI_Dairy+PHDI_Unsaturated_Oils+PHDI_DGV_Ratio+PHDI_ReV_Ratio+PHDI_Eggs+PHDI_Red_Proc_Meat+PHDI_Poultry+PHDI_Saturated_Fats+PHDI_Added_Sugars
PHDI_Fruits + PHDI_NS_Veggies+PHDI_Whole_Grains+PHDI_Seafood_Sub+PHDI_Starchy_Veggies+PHDI_Dairy+PHDI_Unsaturated_Oils+PHDI_DGV_Ratio+PHDI_ReV_Ratio+PHDI_Eggs+PHDI_Red_Proc_Meat+PHDI_Poultry+PHDI_Saturated_Fats+PHDI_Added_Sugars
PHDI_Nuts_and_Peanuts + PHDI_Legumes + PHDI_Fruits + PHDI_NS_Veggies+PHDI_Whole_Grains+PHDI_Seafood_Sub+PHDI_Starchy_Veggies+PHDI_Dairy+PHDI_Unsaturated_Oils+PHDI_DGV_Ratio+PHDI_ReV_Ratio+PHDI_Eggs+PHDI_Red_Proc_Meat+PHDI_Poultry+PHDI_Saturated_Fats+PHDI_Added_Sugars
library(dietaryindex)
library(emmeans)
library(devtools)
library(dplyr)
library(haven)
library(readr)
library(foreign)
setwd("~/Desktop/Master_thesis/NHANES_combined_GitHub")
library(dietaryindex)
library(emmeans)
library(devtools)
library(dplyr)
library(haven)
library(readr)
library(foreign)
load("~/Desktop/Master_thesis/NHANES_combined_GitHub/NHANES_20052006.rda")
library(foreign)
load("~/Desktop/Master_thesis/NHANES_combined_GitHub/NHANES_20052006.rda")
load("~/Desktop/Master_thesis/NHANES_combined_GitHub/NHANES_20052006.rda")
library(dietaryindex)
library(emmeans)
library(devtools)
library(dplyr)
library(haven)
library(readr)
library(foreign)
load("~/Desktop/Master_thesis/NHANES_combined_GitHub/NHANES_20052006.rda")
library(dietaryindex)
library(emmeans)
library(devtools)
library(dplyr)
library(haven)
library(readr)
library(foreign)
load("~/Desktop/Master_thesis/NHANES_combined_GitHub/NHANES_20052006.rda")
library(dietaryindex)
library(emmeans)
library(devtools)
library(dplyr)
library(haven)
library(readr)
library(foreign)
load("~/Desktop/Master_thesis/NHANES_combined_GitHub/NHANES_20052006.rda")
setwd("~/Documents/Laura/UNI/Master/Master thesis/R_Scripts/MSC_LAURA/NHANES_combined_GitHub")
load("~/Documents/Laura/UNI/Master/Master thesis/R_Scripts/MSC_LAURA/NHANES_combined_GitHub")
library(dietaryindex)
library(emmeans)
library(devtools)
library(dplyr)
library(haven)
library(readr)
library(foreign)
load("~/Documents/Laura/UNI/Master/Master thesis/R_Scripts/MSC_LAURA/NHANES_combined_GitHub")
