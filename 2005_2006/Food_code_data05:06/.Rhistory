attr(merged_list$FPED$DR1T_D_CHEESE_GRAM  , "label") <- "Cheese (grams)"
str(merged_list$FPED)
#DR1T_D_TOTAL  = Total milk, yogurt, cheese, and whey
DR1T_D_TOTAL_CONVERTER <- 79.15
merged_list$FPED$DR1T_D_TOTAL_GRAM <- NULL
merged_list$FPED$DR1T_D_TOTAL_GRAM  <- merged_list$FPED$DR1T_D_TOTAL * DR1T_D_TOTAL_CONVERTER
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_D_TOTAL_GRAM  , .after = DR1T_D_TOTAL)
attr(merged_list$FPED$DR1T_D_TOTAL_GRAM  , "label") <- "Total milk, yogurt, cheese, and whey (grams)"
str(merged_list$FPED)
#DR1T_ADD_SUGARS = Foods defined as added sugars
DR1T_ADD_SUGARS_CONVERTER <- 6.08
merged_list$FPED$DR1T_ADD_SUGARS_GRAM <- NULL
merged_list$FPED$DR1T_ADD_SUGARS_GRAM  <- merged_list$FPED$DR1T_ADD_SUGARS * DR1T_ADD_SUGARS_CONVERTER
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_ADD_SUGARS_GRAM  , .after = DR1T_ADD_SUGARS)
attr(merged_list$FPED$DR1T_ADD_SUGARS_GRAM  , "label") <- "Foods defined as added sugars (grams)"
str(merged_list$FPED)
# Chunk 9
merged_list$FPED <- merged_list$FPED %>%
mutate(DR1T_Total_Non_starchy_Veggies = DR1T_V_DRKGR_GRAM +  DR1T_V_REDOR_TOTAL_GRAM+ DR1T_V_OTHER_GRAM)
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_Total_Non_starchy_Veggies  , .after = DR1T_V_TOTAL_GRAM)
attr(merged_list$FPED$DR1T_Total_Non_starchy_Veggies  , "label") <- "Total non starchy veggies consumed (grams)"
# Chunk 10
merged_list$FPED <- merged_list$FPED %>%
mutate(DR1T_Total_Seafood_Sub = DR1T_PF_SEAFD_HI_GRAM +  DR1T_PF_SEAFD_LOW_GRAM)
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_Total_Seafood_Sub , .after = DR1T_PF_SEAFD_LOW_GRAM)
attr(merged_list$FPED$DR1T_Total_Seafood_Sub  , "label") <- "Total Seafood and Substitutes consumed (grams)"
# Chunk 11
merged_list$FPED <- merged_list$FPED %>%
mutate(DR1T_Total_Red_Processed_Meat =  DR1T_PF_MEAT_GRAM+ DR1T_PF_CUREDMEAT_GRAM + DR1T_PF_ORGAN_GRAM )
merged_list$FPED <- merged_list$FPED %>%
relocate(DR1T_Total_Red_Processed_Meat, .after = DR1T_PF_ORGAN_GRAM)
attr(merged_list$FPED$DR1T_Total_Red_Processed_Meat  , "label") <- "Total red and processed meats consumed (grams)"
str(merged_list$FPED)
# Chunk 12
# Columns to sum up
columns_to_sum <- c("DR1T_F_TOTAL_GRAM", "DR1T_V_DRKGR_GRAM", "DR1T_V_REDOR_TOTAL_GRAM",
"DR1T_V_STARCHY_TOTAL_GRAM", "DR1T_V_OTHER_GRAM", "DR1T_PF_LEGUMES_GRAM",
"DR1T_G_WHOLE_GRAM", "DR1T_PF_MEAT_GRAM", "DR1T_PF_CUREDMEAT_GRAM",
"DR1T_PF_ORGAN_GRAM", "DR1T_PF_POULT_GRAM", "DR1T_PF_SEAFD_HI_GRAM",
"DR1T_PF_SEAFD_LOW_GRAM", "DR1T_PF_EGGS_GRAM", "DR1T_PF_NUTSDS_GRAM",
"DR1T_D_TOTAL_GRAM", "DR1T_OILS", "DR1T_SOLID_FATS", "DR1T_ADD_SUGARS_GRAM")
# Perform the sum
total_per_day <- rowSums(merged_list$FPED[, columns_to_sum], na.rm = TRUE)
# Add the new variable to the tibble
merged_list$FPED <- cbind(merged_list$FPED, DR1T_Total_Grams_Per_Day = total_per_day)
attr(merged_list$FPED$DR1T_Total_Grams_Per_Day  , "label") <- "Total grams consumed per day (grams)"
str(merged_list$FPED)
summary(merged_list$FPED$DR1T_Total_Grams_Per_Day, na.rm = T)
# Chunk 13
# Check if the food code exists in the variable, and change the food code number every time
if (any(91406500%in% merged_list$FPED_IND$DR1IFDCD)) {
print(" exists in the variable")
} else {
print(" does not exist in the variable")
}
# Chunk 14
# Find the rows where the Food code number 61201010 is present in the column
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.1/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
print(rows_with_food_code)
glimpse(rows_with_food_code$DR1I_ADD_SUGARS)
glimpse(merged_list$FPED %>% filter(SEQN == 32113))
#for SEQN number = 32113:
## The sugar added from the grapefruit juice is = 22.49.
### The sugar content before for that person was : 114
#### the sugar content after adding the sugar form the grapefruit juice is: 136.4952
##### seems to work for the Grapefruit juice!!
##### double checked other SEQN numbers that did not have to food code / did not consume grapefruit juice --> nothing was changed in the sugar variable for that SEQN!
# Chunk 15
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201020, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (7.42/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 16
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201620, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.55/100)
print(rows_with_food_code)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
glimpse(merged_list$FPED %>% filter(SEQN == 35454))
# Chunk 17
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210000, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 18
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.08/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 19
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210220, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 20
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210250, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100) #same as above
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 21
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210620, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.47/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 22
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210820, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.48/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 23
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61213220, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.9/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 24
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61213800, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 25
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64100100, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (10.4/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 26
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64100110, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (10.9/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 27
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64100200, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.04/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 28
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64101010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.62/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 29
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64104010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (10.1/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 30
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64104600, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (7.7/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 31
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64105400, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (3.41/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 32
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64116020, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (14.2/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 33
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64120010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (13.9/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 34
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64121000, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (13.4/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 35
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64124020, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.98/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 36
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64132010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (16.4/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 37
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64132500, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (7.7/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 38
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64133100, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (6.2/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 39
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 75200700, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (3.75/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 40
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 91406500, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (42/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 41
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 92433000, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (6.38/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 42
#the following code is probably best put into a function! But here I get error messages because the list I would need is the merged_list$FPED.
#the maximal and minimum scores you can get in each category
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5 #ratio components
#the upper and lower limit(s) for every variable are percentages of total grams eaten that day of one participant
PHDI_Nuts_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Nuts_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Legumes_max = 0.085 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Fruits_max = 0.101 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_max = 0.152* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_min = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_max = 0.25 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_max = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min2 = 0.051 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_max = 0.025 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min1 = 0 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min2 = 0.253 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Dairy_max = 0.126 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min1 = 0* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min2 = 0.04* merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_max = 0.02 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_min = 0.013 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Eggs_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_min = 0.014 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_max = 0.007 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_min = 0.29 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Poultry_max = 0.015 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_min = 0.006 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_max = 0.003 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_min = 0.016 * merged_list$FPED$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_max = 0.008 * merged_list$FPED$DR1T_Total_Grams_Per_Day
# three functions, one for adequacy components, once for optimum components and once for moderation components
SCORE_ADEQUACY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv == min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_MODERATION = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
#if the actual serving size is between the min_serv1 and the max_serv, then we need another equation than when actual_serv is between max_serv and min_serv2
SCORE_OPTIMUM = function(actual_serv, min_serv1, min_serv2, max_serv, min_score, max_score) {
case_when(
actual_serv == max_serv ~ max_score,
actual_serv == min_serv1 ~ min_score,
actual_serv >= min_serv2 ~ min_score,
actual_serv < max_serv ~ ((min_score + (actual_serv - min_serv1) * max_score) / (max_serv - min_serv1)),
TRUE ~  min_score + (actual_serv - min_serv2) * max_score / (max_serv - min_serv2)
)
}
#  Ratio components?
# Dark green vegetables (grams) / Total red and orange vegetables (tomatoes + other red and orange) (grams) + Other vegetables not in the vegetable components listed above (grams)
#  DR1T_V_DRKGR_GRAM / DR1T_V_REDOR_TOTAL_GRAM  + DR1T_V_OTHER_GRAM
# and the same is true for the red veggies --> red veggies / all other non starchy veggies
SCORE_RATIO = function(green_veg, red_veg, other_veg, min_score, max_score) {
ratio = (green_veg / (red_veg + other_veg))*100
case_when(
ratio == 33.3 ~ max_score,
ratio < 33.3 ~ pmax((ratio / 33.3) * max_score, min_score),
ratio > 33.3 ~ pmax(((100 - ratio) / (100 - 33.3)) * max_score, min_score)
)
}
#Adequacy components
PHDI_Nuts_and_Peanuts = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_NUTSDS_GRAM, PHDI_Nuts_min, PHDI_Nuts_max, PHDI_MIN, PHDI_MAX)
PHDI_Legumes = SCORE_ADEQUACY(merged_list$FPED$DR1T_PF_LEGUMES_GRAM, PHDI_Legumes_min, PHDI_Legumes_max, PHDI_MIN, PHDI_MAX)
PHDI_Fruits = SCORE_ADEQUACY(merged_list$FPED$DR1T_F_TOTAL_GRAM, PHDI_Fruits_min, PHDI_Fruits_max, PHDI_MIN, PHDI_MAX)
PHDI_NS_Veggies = SCORE_ADEQUACY(merged_list$FPED$DR1T_Total_Non_starchy_Veggies, PHDI_NS_Veg_min, PHDI_NS_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Whole_Grains = SCORE_ADEQUACY(merged_list$FPED$DR1T_G_WHOLE_GRAM, PHDI_W_Grains_min, PHDI_W_Grains_max, PHDI_MIN, PHDI_MAX)
#Optimum components
PHDI_Seafood_Sub = SCORE_OPTIMUM(merged_list$FPED$DR1T_Total_Seafood_Sub, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
PHDI_Starchy_Veggies = SCORE_OPTIMUM(merged_list$FPED$DR1T_V_STARCHY_TOTAL_GRAM, PHDI_ST_Veg_min1, PHDI_ST_Veg_min2, PHDI_ST_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_Dairy = SCORE_OPTIMUM(merged_list$FPED$DR1T_D_TOTAL_GRAM, PHDI_Dairy_min1, PHDI_Dairy_min2, PHDI_Dairy_max, PHDI_MIN, PHDI_MAX)
PHDI_Unsaturated_Oils = SCORE_OPTIMUM(merged_list$FPED$DR1T_OILS, PHDI_UNS_Oils_min1, PHDI_UNS_Oils_min2, PHDI_UNS_Oils_max, PHDI_MIN, PHDI_MAX)
#Ratio components
PHDI_DGV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
PHDI_ReV_Ratio = SCORE_RATIO(merged_list$FPED$DR1T_V_REDOR_TOTAL_GRAM, merged_list$FPED$DR1T_V_DRKGR_GRAM, merged_list$FPED$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
#Moderation compnents
PHDI_Eggs = SCORE_MODERATION(merged_list$FPED$DR1T_PF_EGGS_GRAM, PHDI_Eggs_min, PHDI_Eggs_max, PHDI_MIN, PHDI_MAX)
PHDI_Red_Proc_Meat = SCORE_MODERATION(merged_list$FPED$DR1T_Total_Red_Processed_Meat, PHDI_RP_Meat_min, PHDI_RP_Meat_max, PHDI_MIN, PHDI_MAX)
PHDI_Poultry = SCORE_MODERATION(merged_list$FPED$DR1T_PF_POULT_GRAM, PHDI_Poultry_min, PHDI_Poultry_max, PHDI_MIN, PHDI_MAX)
PHDI_Saturated_Fats = SCORE_MODERATION(merged_list$FPED$DR1T_SOLID_FATS, PHDI_Sat_Fats_min, PHDI_Sat_Fats_max, PHDI_MIN, PHDI_MAX)
PHDI_Added_Sugars = SCORE_MODERATION(merged_list$FPED$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
# the PHDI for every individual for day 1
PHDI_all_D1 = PHDI_Nuts_and_Peanuts + PHDI_Legumes + PHDI_Fruits + PHDI_NS_Veggies+PHDI_Whole_Grains+PHDI_Seafood_Sub+PHDI_Starchy_Veggies+PHDI_Dairy+PHDI_Unsaturated_Oils+PHDI_DGV_Ratio+PHDI_ReV_Ratio+PHDI_Eggs+PHDI_Red_Proc_Meat+PHDI_Poultry+PHDI_Saturated_Fats+PHDI_Added_Sugars
hist(PHDI_all_D1)
summary(PHDI_all_D1)
summary(PHDI_Added_Sugars)
hist(PHDI_Added_Sugars)
# Chunk 43
###### Nuts
excess_N <- ifelse(merged_list$FPED$DR1T_PF_NUTSDS_GRAM > PHDI_Nuts_max &
merged_list$FPED$DR1T_Total_Seafood_Sub < PHDI_Seaf_S_max,
merged_list$FPED$DR1T_PF_NUTSDS_GRAM - PHDI_Nuts_max, 0)
merged_list$FPED$DR1T_Total_Seafood_Sub_new <- ifelse(excess_N + merged_list$FPED$DR1T_Total_Seafood_Sub >= PHDI_Seaf_S_max, PHDI_Seaf_S_max, excess_N + merged_list$FPED$DR1T_Total_Seafood_Sub)
PHDI_Seafood_Sub_new = SCORE_OPTIMUM(merged_list$FPED$DR1T_Total_Seafood_Sub_new, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
summary(PHDI_Seafood_Sub_new)
###### Legumes
excess_L <- ifelse(merged_list$FPED$DR1T_V_LEGUMES_GRAM > PHDI_Legumes_max &
merged_list$FPED$DR1T_Total_Seafood_Sub < PHDI_Seaf_S_max,
merged_list$FPED$DR1T_V_LEGUMES_GRAM - PHDI_Legumes_max, 0)
merged_list$FPED$DR1T_Total_Seafood_Sub_new <- ifelse(excess_L+ merged_list$FPED$DR1T_Total_Seafood_Sub >= PHDI_Seaf_S_max, PHDI_Seaf_S_max, excess_L+ merged_list$FPED$DR1T_Total_Seafood_Sub)
PHDI_Seafood_Sub_new = SCORE_OPTIMUM(merged_list$FPED$DR1T_Total_Seafood_Sub_new, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
PHDI_all_D1_Excess = PHDI_Nuts_and_Peanuts + PHDI_Legumes + PHDI_Fruits + PHDI_NS_Veggies+PHDI_Whole_Grains+PHDI_Seafood_Sub_new+PHDI_Starchy_Veggies+PHDI_Dairy+PHDI_Unsaturated_Oils+PHDI_DGV_Ratio+PHDI_ReV_Ratio+PHDI_Eggs+PHDI_Red_Proc_Meat+PHDI_Poultry+PHDI_Saturated_Fats+PHDI_Added_Sugars
# Chunk 44
summary(PHDI_all_D1)
summary(PHDI_all_D1_Excess)
summary(PHDI_Added_Sugars)
hist(PHDI_Added_Sugars)
hist(PHDI_all_D1)
hist(PHDI_all_D1_Excess)
# Chunk 45
# Extract the first 5 rows from each data frame within merged_list$FPED
subsetted_list <- merged_list$FPED[1:5, ]
# Print the resulting list of data frames
print(subsetted_list)
#add the PHDI min and max
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5 #ratio components
PHDI_Nuts_min = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Nuts_max = 0.025 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Legumes_min = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Legumes_max = 0.085 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Fruits_min = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Fruits_max = 0.101 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_min = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_NS_Veg_max = 0.152* subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_min = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_W_Grains_max = 0.25 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min1 = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_min2 = 0.051 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Seaf_S_max = 0.014 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min1 = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_min2 = 0.051 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_ST_Veg_max = 0.025 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min1 = 0 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Dairy_min2 = 0.253 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Dairy_max = 0.126 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min1 = 0* subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_min2 = 0.04* subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_UNS_Oils_max = 0.02 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Eggs_min = 0.013 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Eggs_max = 0.007 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_min = 0.014 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_RP_Meat_max = 0.007 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Poultry_min = 0.29 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Poultry_max = 0.015 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_min = 0.006 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Sat_Fats_max = 0.003 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_min = 0.016 * subsetted_list$DR1T_Total_Grams_Per_Day
PHDI_Add_Sugars_max = 0.008 * subsetted_list$DR1T_Total_Grams_Per_Day
#Insert the PHDI code and change merged_list for subsetted_list
PHDI_SUBSETTED_Nuts_and_Peanuts = SCORE_ADEQUACY(subsetted_list$DR1T_PF_NUTSDS_GRAM, PHDI_Nuts_min, PHDI_Nuts_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Legumes = SCORE_ADEQUACY(subsetted_list$DR1T_PF_LEGUMES_GRAM, PHDI_Legumes_min, PHDI_Legumes_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Fruits = SCORE_ADEQUACY(subsetted_list$DR1T_F_TOTAL_GRAM, PHDI_Fruits_min, PHDI_Fruits_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_NS_Veggies = SCORE_ADEQUACY(subsetted_list$DR1T_Total_Non_starchy_Veggies, PHDI_NS_Veg_min, PHDI_NS_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Whole_Grains = SCORE_ADEQUACY(subsetted_list$DR1T_G_WHOLE_GRAM, PHDI_W_Grains_min, PHDI_W_Grains_max, PHDI_MIN, PHDI_MAX)
#Optimum components
PHDI_SUBSETTED_Seafood_Sub = SCORE_OPTIMUM(subsetted_list$DR1T_Total_Seafood_Sub, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Starchy_Veggies = SCORE_OPTIMUM(subsetted_list$DR1T_V_STARCHY_TOTAL_GRAM, PHDI_ST_Veg_min1, PHDI_ST_Veg_min2, PHDI_ST_Veg_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Dairy = SCORE_OPTIMUM(subsetted_list$DR1T_D_TOTAL_GRAM, PHDI_Dairy_min1, PHDI_Dairy_min2, PHDI_Dairy_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Unsaturated_Oils = SCORE_OPTIMUM(subsetted_list$DR1T_OILS, PHDI_UNS_Oils_min1, PHDI_UNS_Oils_min2, PHDI_UNS_Oils_max, PHDI_MIN, PHDI_MAX)
#Ratio components
PHDI_SUBSETTED_DGV_Ratio = SCORE_RATIO(subsetted_list$DR1T_V_DRKGR_GRAM, subsetted_list$DR1T_V_REDOR_TOTAL_GRAM, subsetted_list$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
PHDI_SUBSETTED_ReV_Ratio = SCORE_RATIO(subsetted_list$DR1T_V_REDOR_TOTAL_GRAM, subsetted_list$DR1T_V_DRKGR_GRAM, subsetted_list$DR1T_V_OTHER_GRAM, PHDI_MIN, PHDI_MAX_2)
#Moderation compnents
PHDI_SUBSETTED_Eggs = SCORE_MODERATION(subsetted_list$DR1T_PF_EGGS_GRAM, PHDI_Eggs_min, PHDI_Eggs_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Red_Proc_Meat = SCORE_MODERATION(subsetted_list$DR1T_Total_Red_Processed_Meat, PHDI_RP_Meat_min, PHDI_RP_Meat_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Poultry = SCORE_MODERATION(subsetted_list$DR1T_PF_POULT_GRAM, PHDI_Poultry_min, PHDI_Poultry_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Saturated_Fats = SCORE_MODERATION(subsetted_list$DR1T_SOLID_FATS, PHDI_Sat_Fats_min, PHDI_Sat_Fats_max, PHDI_MIN, PHDI_MAX)
PHDI_SUBSETTED_Added_Sugars = SCORE_MODERATION(subsetted_list$DR1T_ADD_SUGARS_GRAM, PHDI_Add_Sugars_min, PHDI_Add_Sugars_max, PHDI_MIN, PHDI_MAX)
excess_N_SUB <- ifelse(subsetted_list$DR1T_PF_NUTSDS_GRAM > PHDI_Nuts_max &
subsetted_list$DR1T_Total_Seafood_Sub < PHDI_Seaf_S_max,
subsetted_list$DR1T_PF_NUTSDS_GRAM - PHDI_Nuts_max, 0)
subsetted_list$DR1T_Total_Seafood_Sub_new <- ifelse(excess_N_SUB +subsetted_list$DR1T_Total_Seafood_Sub >=PHDI_Seaf_S_max, PHDI_Seaf_S_max, excess_N_SUB +subsetted_list$DR1T_Total_Seafood_Sub)
PHDI_Seafood_Sub_new = SCORE_OPTIMUM(subsetted_list$DR1T_Total_Seafood_Sub_new, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
summary(PHDI_Seafood_Sub_new)
###### Legumes
excess_L <- ifelse(subsetted_list$DR1T_V_LEGUMES_GRAM > PHDI_Legumes_max &
subsetted_list$DR1T_Total_Seafood_Sub < PHDI_Seaf_S_max,
subsetted_list$DR1T_V_LEGUMES_GRAM - PHDI_Legumes_max, 0)
subsetted_list$DR1T_Total_Seafood_Sub_new <- ifelse(excess_L+subsetted_list$DR1T_Total_Seafood_Sub >=
PHDI_Seaf_S_max, PHDI_Seaf_S_max,
excess_L + subsetted_list$DR1T_Total_Seafood_Sub)
PHDI_Seafood_Sub = SCORE_OPTIMUM(subsetted_list$DR1T_Total_Seafood_Sub, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
summary(PHDI_Seafood_Sub)
PHDI_Subsetted_Seafood_Sub_new = SCORE_OPTIMUM(subsetted_list$DR1T_Total_Seafood_Sub_new, PHDI_Seaf_S_min1, PHDI_Seaf_S_min2, PHDI_Seaf_S_max, PHDI_MIN, PHDI_MAX)
summary(PHDI_Seafood_Sub_new)
# the PHDI for every individual for day 1
PHDI_SUBSETTED_all_D1 = PHDI_SUBSETTED_Nuts_and_Peanuts + PHDI_SUBSETTED_Legumes + PHDI_SUBSETTED_Fruits + PHDI_SUBSETTED_NS_Veggies+PHDI_SUBSETTED_Whole_Grains+PHDI_Subsetted_Seafood_Sub_new+PHDI_SUBSETTED_Starchy_Veggies+PHDI_SUBSETTED_Dairy+PHDI_SUBSETTED_Unsaturated_Oils+PHDI_SUBSETTED_DGV_Ratio+PHDI_SUBSETTED_ReV_Ratio+PHDI_SUBSETTED_Eggs+PHDI_SUBSETTED_Red_Proc_Meat+PHDI_SUBSETTED_Poultry+PHDI_SUBSETTED_Saturated_Fats+PHDI_SUBSETTED_Added_Sugars
summary(PHDI_SUBSETTED_all_D1)
PHDI_SUBSETTED_all_D1
##seems to work!!
# Chunk 46
library(pastecs)
library(e1071)
summary(PHDI_all_D1_Excess)
hist(PHDI_all_D1_Excess)
round(stat.desc(PHDI_all_D1_Excess, norm=F), 2)
skewness(PHDI_all_D1_Excess, na.rm = T)
qqnorm(PHDI_all_D1_Excess)
qqline(PHDI_all_D1_Excess, col="blue")
ggpairs(PHDI_all_D1_Excess)
