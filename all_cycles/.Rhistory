PHDI_MIN_WGRAIN_F_SERV = 0
PHDI_MAX_WGRAIN_F_SERV = 75
PHDI_MIN_WGRAIN_M_SERV = 0
PHDI_MAX_WGRAIN_M_SERV = 90
PHDI_MIN_STARCHY_VEG_SERV = 200
PHDI_MAX_STARCHY_VEG_SERV = 50
PHDI_MIN_VEG_SERV = 0
PHDI_MAX_VEG_SERV = 300
PHDI_MIN_FRT_SERV = 0
PHDI_MAX_FRT_SERV = 200
PHDI_MIN_DAIRY_SERV = 1000
PHDI_MAX_DAIRY_SERV = 250
PHDI_MIN_REDPROC_MEAT_SERV = 100
PHDI_MAX_REDPROC_MEAT_SERV = 14
PHDI_MIN_POULTRY_SERV = 100
PHDI_MAX_POULTRY_SERV = 29
PHDI_MIN_EGG_SERV = 120
PHDI_MAX_EGG_SERV = 13
PHDI_MIN_FISH_SERV = 0
PHDI_MAX_FISH_SERV = 28
PHDI_MIN_NUTS_SERV = 0
PHDI_MAX_NUTS_SERV = 50
PHDI_MIN_LEGUMES_SERV = 0
PHDI_MAX_LEGUMES_SERV = 100
PHDI_MIN_SOY_SERV = 0
PHDI_MAX_SOY_SERV = 50
PHDI_MIN_ADDED_FAT_UNSAT_SERV = 3.5
PHDI_MAX_ADDED_FAT_UNSAT_SERV = 21
PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV = 10
PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV = 0
PHDI_MIN_ADDED_SUGAR_SERV = 25
PHDI_MAX_ADDED_SUGAR_SERV = 5
SCORE_HEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv <= min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_UNHEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SERV_DATA = SERV_DATA %>%
mutate(
ADDED_FAT_UNSAT_SERV_PHDI = (ADDED_FAT_UNSAT_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_FAT_SAT_TRANS_SERV_PHDI = (ADDED_FAT_SAT_TRANS_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_SUGAR_SERV_PHDI = (ADDED_SUGAR_SERV_PHDI * 4 / TOTALKCAL_PHDI) * 100
)
SERV_DATA %>%
dplyr::mutate(
RESPONDENTID = RESPONDENTID,
GENDER = GENDER,
TOTALKCAL_PHDI = TOTALKCAL_PHDI,
PHDI_WGRAIN = case_when(
# GENDER = 2 is female
GENDER == 2 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MAX,
GENDER == 2 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_F_SERV ~ PHDI_MIN,
GENDER == 2 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_F_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_F_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_F_SERV - PHDI_MIN_WGRAIN_F_SERV),
GENDER == 1 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MAX,
GENDER == 1 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_M_SERV ~ PHDI_MIN,
GENDER == 1 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_M_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_M_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_M_SERV - PHDI_MIN_WGRAIN_M_SERV),
),
PHDI_STARCHY_VEG = SCORE_UNHEALTHY(STARCHY_VEG_SERV_PHDI, PHDI_MIN_STARCHY_VEG_SERV, PHDI_MAX_STARCHY_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_VEG = SCORE_HEALTHY(VEG_SERV_PHDI, PHDI_MIN_VEG_SERV, PHDI_MAX_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FRT = SCORE_HEALTHY(FRT_SERV_PHDI, PHDI_MIN_FRT_SERV, PHDI_MAX_FRT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_DAIRY = SCORE_UNHEALTHY(DAIRY_SERV_PHDI, PHDI_MIN_DAIRY_SERV, PHDI_MAX_DAIRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_REDPROC_MEAT = SCORE_UNHEALTHY(REDPROC_MEAT_SERV_PHDI, PHDI_MIN_REDPROC_MEAT_SERV, PHDI_MAX_REDPROC_MEAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_POULTRY = SCORE_UNHEALTHY(POULTRY_SERV_PHDI, PHDI_MIN_POULTRY_SERV, PHDI_MAX_POULTRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_EGG = SCORE_UNHEALTHY(EGG_SERV_PHDI, PHDI_MIN_EGG_SERV, PHDI_MAX_EGG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FISH = SCORE_HEALTHY(FISH_SERV_PHDI, PHDI_MIN_FISH_SERV, PHDI_MAX_FISH_SERV, PHDI_MIN, PHDI_MAX),
PHDI_NUTS = SCORE_HEALTHY(NUTS_SERV_PHDI, PHDI_MIN_NUTS_SERV, PHDI_MAX_NUTS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_LEGUMES = SCORE_HEALTHY(LEGUMES_SERV_PHDI, PHDI_MIN_LEGUMES_SERV, PHDI_MAX_LEGUMES_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_SOY = SCORE_HEALTHY(SOY_SERV_PHDI, PHDI_MIN_SOY_SERV, PHDI_MAX_SOY_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_ADDED_FAT_UNSAT = SCORE_HEALTHY(ADDED_FAT_UNSAT_SERV_PHDI, PHDI_MIN_ADDED_FAT_UNSAT_SERV, PHDI_MAX_ADDED_FAT_UNSAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_FAT_SAT = SCORE_UNHEALTHY(ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV, PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_SUGAR = SCORE_UNHEALTHY(ADDED_SUGAR_SERV_PHDI, PHDI_MIN_ADDED_SUGAR_SERV, PHDI_MAX_ADDED_SUGAR_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ALL = PHDI_WGRAIN + PHDI_STARCHY_VEG + PHDI_VEG + PHDI_FRT + PHDI_DAIRY + PHDI_REDPROC_MEAT + PHDI_POULTRY + PHDI_EGG + PHDI_FISH + PHDI_NUTS + PHDI_LEGUMES + PHDI_SOY + PHDI_ADDED_FAT_UNSAT + PHDI_ADDED_FAT_SAT + PHDI_ADDED_SUGAR
) %>%
dplyr::select(RESPONDENTID, GENDER, PHDI_ALL, TOTALKCAL_PHDI, PHDI_WGRAIN, PHDI_STARCHY_VEG, PHDI_VEG, PHDI_FRT, PHDI_DAIRY, PHDI_REDPROC_MEAT, PHDI_POULTRY, PHDI_EGG, PHDI_FISH, PHDI_NUTS, PHDI_LEGUMES, PHDI_SOY, PHDI_ADDED_FAT_UNSAT, PHDI_ADDED_FAT_SAT, PHDI_ADDED_SUGAR)
}
# Chunk 4
# Columns to sum up
columns_to_sum <- c("DR1T_F_TOTAL_GRAM", "DR1T_V_DRKGR_GRAM", "DR1T_V_REDOR_TOTAL_GRAM",
"DR1T_V_STARCHY_TOTAL_GRAM", "DR1T_V_OTHER_GRAM", "DR1T_PF_LEGUMES_GRAM",
"DR1T_G_WHOLE_GRAM", "DR1T_PF_MEAT_GRAM", "DR1T_PF_CUREDMEAT_GRAM",
"DR1T_PF_ORGAN_GRAM", "DR1T_PF_POULT_GRAM", "DR1T_PF_SEAFD_HI_GRAM",
"DR1T_PF_SEAFD_LOW_GRAM", "DR1T_PF_EGGS_GRAM", "DR1T_PF_NUTSDS_GRAM",
"DR1T_D_TOTAL_GRAM", "DR1T_OILS", "DR1T_SOLID_FATS", "DR1T_ADD_SUGARS_GRAM")
# Perform the sum
total_per_day <- rowSums(merged_list$FPED[, columns_to_sum], na.rm = TRUE)
# Add the new variable to the tibble
merged_list$FPED <- cbind(merged_list$FPED, DR1T_Total_Grams_Per_Day = total_per_day)
attr(merged_list$FPED$DR1T_Total_Grams_Per_Day  , "label") <- "Total grams consumed per day (grams)"
str(merged_list$FPED)
summary(merged_list$FPED$DR1T_Total_Grams_Per_Day, na.rm = T)
# Chunk 5
# Find the rows where the Food code number 61201010 is present in the column
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.1/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
print(rows_with_food_code)
glimpse(rows_with_food_code$DR1I_ADD_SUGARS)
glimpse(merged_list$FPED %>% filter(SEQN == 32113))
#for SEQN number = 32113:
## The sugar added from the grapefruit juice is = 22.49.
### The sugar content before for that person was : 114
#### the sugar content after adding the sugar form the grapefruit juice is: 136.4952
##### seems to work for the Grapefruit juice!!
##### double checked other SEQN numbers that did not have to food code / did not consume grapefruit juice --> nothing was changed in the sugar variable for that SEQN!
# Chunk 6
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201020, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (7.42/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 7
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61201620, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.55/100)
print(rows_with_food_code)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
glimpse(merged_list$FPED %>% filter(SEQN == 35454))
# Chunk 8
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210000, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 9
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.08/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 10
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210220, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 11
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210250, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100) #same as above
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 12
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210620, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.47/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 13
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61210820, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.48/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 14
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61213220, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.9/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 15
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 61213800, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (8.18/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 16
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64100100, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (10.4/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 17
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64100110, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (10.9/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 18
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64100200, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.04/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 19
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64101010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.62/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 20
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64104010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (10.1/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 21
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64104600, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (7.7/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 22
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64105400, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (3.41/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 23
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64116020, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (14.2/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 24
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64120010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (13.9/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 25
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64121000, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (13.4/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 26
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64124020, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (9.98/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 27
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64132010, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (16.4/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 28
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64132500, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (7.7/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 29
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 64133100, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (6.2/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 30
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 75200700, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (3.75/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 31
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 91406500, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (42/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 32
rows_with_food_code <- merged_list$FPED_IND[merged_list$FPED_IND$DR1IFDCD == 92433000, ]
rows_with_food_code$DR1I_ADD_SUGARS <- rows_with_food_code$DR1IGRMS * (6.38/100)
for (i in 1:nrow(rows_with_food_code)) {
row_index <- which(merged_list$FPED$SEQN == rows_with_food_code$SEQN[i])
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] <-
merged_list$FPED[row_index, "DR1T_ADD_SUGARS_GRAM"] + rows_with_food_code$DR1I_ADD_SUGARS[i]
}
# Chunk 33
PHDI_V2 = function(SERV_DATA, RESPONDENTID, GENDER, TOTALKCAL_PHDI, WGRAIN_SERV_PHDI, STARCHY_VEG_SERV_PHDI, VEG_SERV_PHDI, FRT_SERV_PHDI, DAIRY_SERV_PHDI, REDPROC_MEAT_SERV_PHDI, POULTRY_SERV_PHDI, EGG_SERV_PHDI, FISH_SERV_PHDI, NUTS_SERV_PHDI, LEGUMES_SERV_PHDI, SOY_SERV_PHDI, ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, ADDED_SUGAR_SERV_PHDI) {
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5
PHDI_MIN_WGRAIN_F_SERV = 0
PHDI_MAX_WGRAIN_F_SERV = 75
PHDI_MIN_WGRAIN_M_SERV = 0
PHDI_MAX_WGRAIN_M_SERV = 90
PHDI_MIN_STARCHY_VEG_SERV = 200
PHDI_MAX_STARCHY_VEG_SERV = 50
PHDI_MIN_VEG_SERV = 0
PHDI_MAX_VEG_SERV = 300
PHDI_MIN_FRT_SERV = 0
PHDI_MAX_FRT_SERV = 200
PHDI_MIN_DAIRY_SERV = 1000
PHDI_MAX_DAIRY_SERV = 250
PHDI_MIN_REDPROC_MEAT_SERV = 100
PHDI_MAX_REDPROC_MEAT_SERV = 14
PHDI_MIN_POULTRY_SERV = 100
PHDI_MAX_POULTRY_SERV = 29
PHDI_MIN_EGG_SERV = 120
PHDI_MAX_EGG_SERV = 13
PHDI_MIN_FISH_SERV = 0
PHDI_MAX_FISH_SERV = 28
PHDI_MIN_NUTS_SERV = 0
PHDI_MAX_NUTS_SERV = 50
PHDI_MIN_LEGUMES_SERV = 0
PHDI_MAX_LEGUMES_SERV = 100
PHDI_MIN_SOY_SERV = 0
PHDI_MAX_SOY_SERV = 50
PHDI_MIN_ADDED_FAT_UNSAT_SERV = 3.5
PHDI_MAX_ADDED_FAT_UNSAT_SERV = 21
PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV = 10
PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV = 0
PHDI_MIN_ADDED_SUGAR_SERV = 25
PHDI_MAX_ADDED_SUGAR_SERV = 5
SCORE_HEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv <= min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_UNHEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SERV_DATA = SERV_DATA %>%
mutate(
ADDED_FAT_UNSAT_SERV_PHDI = (ADDED_FAT_UNSAT_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_FAT_SAT_TRANS_SERV_PHDI = (ADDED_FAT_SAT_TRANS_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_SUGAR_SERV_PHDI = (ADDED_SUGAR_SERV_PHDI * 4 / TOTALKCAL_PHDI) * 100
)
SERV_DATA %>%
dplyr::mutate(
RESPONDENTID = RESPONDENTID,
GENDER = GENDER,
TOTALKCAL_PHDI = TOTALKCAL_PHDI,
PHDI_WGRAIN = case_when(
# GENDER = 2 is female
GENDER == 2 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MAX,
GENDER == 2 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_F_SERV ~ PHDI_MIN,
GENDER == 2 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_F_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_F_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_F_SERV - PHDI_MIN_WGRAIN_F_SERV),
GENDER == 1 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MAX,
GENDER == 1 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_M_SERV ~ PHDI_MIN,
GENDER == 1 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_M_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_M_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_M_SERV - PHDI_MIN_WGRAIN_M_SERV),
),
PHDI_STARCHY_VEG = SCORE_UNHEALTHY(STARCHY_VEG_SERV_PHDI, PHDI_MIN_STARCHY_VEG_SERV, PHDI_MAX_STARCHY_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_VEG = SCORE_HEALTHY(VEG_SERV_PHDI, PHDI_MIN_VEG_SERV, PHDI_MAX_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FRT = SCORE_HEALTHY(FRT_SERV_PHDI, PHDI_MIN_FRT_SERV, PHDI_MAX_FRT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_DAIRY = SCORE_UNHEALTHY(DAIRY_SERV_PHDI, PHDI_MIN_DAIRY_SERV, PHDI_MAX_DAIRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_REDPROC_MEAT = SCORE_UNHEALTHY(REDPROC_MEAT_SERV_PHDI, PHDI_MIN_REDPROC_MEAT_SERV, PHDI_MAX_REDPROC_MEAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_POULTRY = SCORE_UNHEALTHY(POULTRY_SERV_PHDI, PHDI_MIN_POULTRY_SERV, PHDI_MAX_POULTRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_EGG = SCORE_UNHEALTHY(EGG_SERV_PHDI, PHDI_MIN_EGG_SERV, PHDI_MAX_EGG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FISH = SCORE_HEALTHY(FISH_SERV_PHDI, PHDI_MIN_FISH_SERV, PHDI_MAX_FISH_SERV, PHDI_MIN, PHDI_MAX),
PHDI_NUTS = SCORE_HEALTHY(NUTS_SERV_PHDI, PHDI_MIN_NUTS_SERV, PHDI_MAX_NUTS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_LEGUMES = SCORE_HEALTHY(LEGUMES_SERV_PHDI, PHDI_MIN_LEGUMES_SERV, PHDI_MAX_LEGUMES_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_SOY = SCORE_HEALTHY(SOY_SERV_PHDI, PHDI_MIN_SOY_SERV, PHDI_MAX_SOY_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_ADDED_FAT_UNSAT = SCORE_HEALTHY(ADDED_FAT_UNSAT_SERV_PHDI, PHDI_MIN_ADDED_FAT_UNSAT_SERV, PHDI_MAX_ADDED_FAT_UNSAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_FAT_SAT = SCORE_UNHEALTHY(ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV, PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_SUGAR = SCORE_UNHEALTHY(ADDED_SUGAR_SERV_PHDI, PHDI_MIN_ADDED_SUGAR_SERV, PHDI_MAX_ADDED_SUGAR_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ALL = PHDI_WGRAIN + PHDI_STARCHY_VEG + PHDI_VEG + PHDI_FRT + PHDI_DAIRY + PHDI_REDPROC_MEAT + PHDI_POULTRY + PHDI_EGG + PHDI_FISH + PHDI_NUTS + PHDI_LEGUMES + PHDI_SOY + PHDI_ADDED_FAT_UNSAT + PHDI_ADDED_FAT_SAT + PHDI_ADDED_SUGAR
) %>%
dplyr::select(RESPONDENTID, GENDER, PHDI_ALL, TOTALKCAL_PHDI, PHDI_WGRAIN, PHDI_STARCHY_VEG, PHDI_VEG, PHDI_FRT, PHDI_DAIRY, PHDI_REDPROC_MEAT, PHDI_POULTRY, PHDI_EGG, PHDI_FISH, PHDI_NUTS, PHDI_LEGUMES, PHDI_SOY, PHDI_ADDED_FAT_UNSAT, PHDI_ADDED_FAT_SAT, PHDI_ADDED_SUGAR)
}
PHDI_list <- PHDI_V2(merged_list$FPED, merged_list$FPED$SEQN, merged_list$FPED$RIDAGEYR, merged_list$NUTRIENT$DR1TKCAL, merged_list$FPED$DR1T_G_WHOLE_GRAM, merged_list$FPED$DR1T_V_STARCHY_TOTAL_GRAM, merged_list$FPED$DR1T_Total_Veg_without_Starch_Leg, merged_list$FPED$DR1T_Total_Fruit_without_juice, merged_list$FPED$DR1T_D_TOTAL_GRAM, merged_list$FPED$DR1T_Total_Red_Processed_Meat, merged_list$FPED$DR1T_PF_POULT_GRAM, merged_list$FPED$DR1T_PF_EGGS_GRAM, merged_list$FPED$DR1T_Total_Seafood_Sub, merged_list$FPED$DR1T_PF_NUTSDS_GRAM, merged_list$FPED$DR1T_V_LEGUMES_GRAM, merged_list$FPED$DR1T_PF_SOY_GRAM, merged_list$FPED$DR1T_OILS, merged_list$FPED$DR1T_SOLID_FATS, merged_list$FPED$DR1T_ADD_SUGARS_GRAM)
mean(PHDI_list$PHDI_ALL, na.rm = T)
mean(PHDI_all_D1_Excess, na.rm = T) #48.29709
mean(PHDI_list$PHDI_ALL, na.rm = T) #61.50738 #without the extra sugar content
#there seems to be quite a difference, but a lot is not in the original PHDI! Refined grains, fruit juices, ...  eg
## the mean with the changed added_sugar variable is then 59.7091
#there seems to be quite a difference, but a lot is not in the original PHDI! Refined grains, fruit juices, ...  eg
## the mean with the changed added_sugar variable is then 59.7091
t.test(PHDI_all_D1_Excess, PHDI_list$PHDI_ALL)
mean(PHDI_all_D1_Excess, na.rm = T) #48.29709
mean(PHDI_list$PHDI_ALL, na.rm = T) #61.50738 #without the extra sugar content
#there seems to be quite a difference, but a lot is not in the original PHDI! Refined grains, fruit juices, ...  eg
## the mean with the changed added_sugar variable is then 59.7091
t.test(PHDI_all_D1_Excess, PHDI_list$PHDI_ALL)
#PHDI_all_years_Day1 <- list(
PHDI_0506 = PHDI_05_06_D1,
PHDI_all_years_D1 <- read.csv("~/Documents/Laura/UNI/Master/Master thesis/R_Scripts/MSC_LAURA/all_cycles/PHDI_all_years_Day1.csv")
boxplot(PHDI_all_years_D1,
main = "Distribution of Data for Different Years",
xlab = "Years", ylab = "Value",
names = c("05-06", "07-08", "09-10", "11-12", "13-14", "15-16"))
means <- sapply(PHDI_all_years_D1, mean, na.rm = TRUE)
text(1:length(means), means, labels = round(means, 2), pos = 3, col = "black")
summary(aov(unlist(PHDI_all_years_D1) ~ factor(rep(names(PHDI_all_years_D1), sapply(PHDI_all_years_D1, length)))))
#differences between genders
## male = 1, female = 2
mean_phdi <- PHDI_LAB_0506_D1%>%
group_by(Gender) %>%
summarize(mean_phdi = mean(PHDI_0506, na.rm=T))
str(PHDI_LAB_0506_D1)
#Plot histograms for each gender
ggplot(PHDI_LAB_0506_D1, aes(x = PHDI_0506)) +
geom_histogram(binwidth = 5, fill = "blue", alpha = 0.5) +
facet_wrap(~ Gender) +
labs(title = "Histogram of PHDI by Gender", x = "PHDI_0506", y = "Frequency")
#Plot histograms for each gender
boxplot(PHDI_LAB_0506_D1, aes(x = PHDI_0506)) +
geom_histogram(binwidth = 5, fill = "blue", alpha = 0.5) +
facet_wrap(~ Gender) +
labs(title = "Histogram of PHDI by Gender", x = "PHDI_0506", y = "Frequency")
#testing if the variances are significantly different from one another or not --> p values greater than 0.05 means that there is no significant difference (=good)
leveneTest(PHDI_0506 ~ as.factor(Gender), data = PHDI_LAB_0506_D1)
#Plot histograms for each gender
boxplot(PHDI_LAB_0506_D1, aes(x = PHDI_0506)) +
geom_histogram(binwidth = 5, fill = "blue", alpha = 0.5) +
facet_wrap(~ Gender) +
labs(title = "Histogram of PHDI by Gender", x = "PHDI_0506", y = "Frequency")
#Plot histograms for each gender
ggplot(PHDI_LAB_0506_D1, aes(x = PHDI_0506)) +
geom_histogram(binwidth = 5, fill = "blue", alpha = 0.5) +
facet_wrap(~ Gender) +
labs(title = "Histogram of PHDI by Gender", x = "PHDI_0506", y = "Frequency")
boxplot(PHDI_LAB_0506_D1,
facet_wrap(~Gender)
main = "Distribution between males and females",
boxplot(PHDI_LAB_0506_D1,
facet_wrap(~Gender),
main = "Distribution between males and females",
xlab = "Male vs Female", ylab = "PHDI-US value")
boxplot(PHDI_all_years_D1,
main = "Distribution of Data for Different Years",
xlab = "Years", ylab = "Value",
names = c("05-06", "07-08", "09-10", "11-12", "13-14", "15-16"))
boxplot(PHDI_LAB_0506_D1$Gender,
main = "Distribution between males and females",
xlab = "Male vs Female", ylab = "PHDI-US value")
ggplot(PHDI_LAB_0506_D1, aes(x = Gender, y = PHDI_0506)) +
geom_boxplot() +
labs(title = "PHDI Values by Gender", x = "Gender", y = "PHDI Values") +
theme_minimal()
ggplot(PHDI_LAB_0506_D1, aes(x = gender, y = PHDI_0506)) +
geom_boxplot() +
labs(title = "PHDI Values by Gender", x = "Gender", y = "PHDI Values") +
theme_minimal()
ggplot(PHDI_LAB_0506_D1, aes(x = Gender, y = PHDI_0506)) +
geom_boxplot() +
labs(title = "PHDI Values by Gender", x = "Gender", y = "PHDI Values") +
theme_minimal()
PHDI_LAB_0506_D1
ggplot(PHDI_LAB_0506_D1, aes(x = as.factor(Gender), y = PHDI_0506)) +
geom_boxplot() +
labs(title = "PHDI Values by Gender", x = "Gender", y = "PHDI Values") +
theme_minimal()
ggplot(PHDI_LAB_0506_D1, aes(x = as.factor(Gender), y = PHDI_0506)) +
geom_boxplot() +
scale_x_discrete(labels = c("1" = "Male", "2" = "Female")) +
labs(title = "PHDI Values by Gender", x = "Gender", y = "PHDI Values") +
theme_minimal()
