PHDI_MAX_SOY_SERV = 50
PHDI_MIN_ADDED_FAT_UNSAT_SERV = 3.5
PHDI_MAX_ADDED_FAT_UNSAT_SERV = 21
PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV = 10
PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV = 0
PHDI_MIN_ADDED_SUGAR_SERV = 25
PHDI_MAX_ADDED_SUGAR_SERV = 5
SCORE_HEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv <= min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_UNHEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
## update the serving size of ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, and ADDED_SUGAR_SERV_PHDI to % kcal
SERV_DATA = SERV_DATA %>%
mutate(
### 1 gram of fat = 9 kcal. 1 gram of carbohydrate = 4 kcal. Multiply by 100 to get percentage
ADDED_FAT_UNSAT_SERV_PHDI = (ADDED_FAT_UNSAT_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_FAT_SAT_TRANS_SERV_PHDI = (ADDED_FAT_SAT_TRANS_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_SUGAR_SERV_PHDI = (ADDED_SUGAR_SERV_PHDI * 4 / TOTALKCAL_PHDI) * 100
)
## PHDI calculation
SERV_DATA %>%
dplyr::mutate(
RESPONDENTID = RESPONDENTID,
GENDER = GENDER,
TOTALKCAL_PHDI = TOTALKCAL_PHDI,
PHDI_WGRAIN = case_when(
# GENDER = 2 is female
GENDER == 2 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MAX,
GENDER == 2 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_F_SERV ~ PHDI_MIN,
GENDER == 2 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_F_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_F_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_F_SERV - PHDI_MIN_WGRAIN_F_SERV),
GENDER == 1 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MAX,
GENDER == 1 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_M_SERV ~ PHDI_MIN,
GENDER == 1 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_M_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_M_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_M_SERV - PHDI_MIN_WGRAIN_M_SERV),
),
PHDI_STARCHY_VEG = SCORE_UNHEALTHY(STARCHY_VEG_SERV_PHDI, PHDI_MIN_STARCHY_VEG_SERV, PHDI_MAX_STARCHY_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_VEG = SCORE_HEALTHY(VEG_SERV_PHDI, PHDI_MIN_VEG_SERV, PHDI_MAX_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FRT = SCORE_HEALTHY(FRT_SERV_PHDI, PHDI_MIN_FRT_SERV, PHDI_MAX_FRT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_DAIRY = SCORE_UNHEALTHY(DAIRY_SERV_PHDI, PHDI_MIN_DAIRY_SERV, PHDI_MAX_DAIRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_REDPROC_MEAT = SCORE_UNHEALTHY(REDPROC_MEAT_SERV_PHDI, PHDI_MIN_REDPROC_MEAT_SERV, PHDI_MAX_REDPROC_MEAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_POULTRY = SCORE_UNHEALTHY(POULTRY_SERV_PHDI, PHDI_MIN_POULTRY_SERV, PHDI_MAX_POULTRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_EGG = SCORE_UNHEALTHY(EGG_SERV_PHDI, PHDI_MIN_EGG_SERV, PHDI_MAX_EGG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FISH = SCORE_HEALTHY(FISH_SERV_PHDI, PHDI_MIN_FISH_SERV, PHDI_MAX_FISH_SERV, PHDI_MIN, PHDI_MAX),
PHDI_NUTS = SCORE_HEALTHY(NUTS_SERV_PHDI, PHDI_MIN_NUTS_SERV, PHDI_MAX_NUTS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_LEGUMES = SCORE_HEALTHY(LEGUMES_SERV_PHDI, PHDI_MIN_LEGUMES_SERV, PHDI_MAX_LEGUMES_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_SOY = SCORE_HEALTHY(SOY_SERV_PHDI, PHDI_MIN_SOY_SERV, PHDI_MAX_SOY_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_ADDED_FAT_UNSAT = SCORE_HEALTHY(ADDED_FAT_UNSAT_SERV_PHDI, PHDI_MIN_ADDED_FAT_UNSAT_SERV, PHDI_MAX_ADDED_FAT_UNSAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_FAT_SAT = SCORE_UNHEALTHY(ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV, PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_SUGAR = SCORE_UNHEALTHY(ADDED_SUGAR_SERV_PHDI, PHDI_MIN_ADDED_SUGAR_SERV, PHDI_MAX_ADDED_SUGAR_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ALL = PHDI_WGRAIN + PHDI_STARCHY_VEG + PHDI_VEG + PHDI_FRT + PHDI_DAIRY + PHDI_REDPROC_MEAT + PHDI_POULTRY + PHDI_EGG + PHDI_FISH + PHDI_NUTS + PHDI_LEGUMES + PHDI_SOY + PHDI_ADDED_FAT_UNSAT + PHDI_ADDED_FAT_SAT + PHDI_ADDED_SUGAR
) %>%
dplyr::select(RESPONDENTID, GENDER, PHDI_ALL, TOTALKCAL_PHDI, PHDI_WGRAIN, PHDI_STARCHY_VEG, PHDI_VEG, PHDI_FRT, PHDI_DAIRY, PHDI_REDPROC_MEAT, PHDI_POULTRY, PHDI_EGG, PHDI_FISH, PHDI_NUTS, PHDI_LEGUMES, PHDI_SOY, PHDI_ADDED_FAT_UNSAT, PHDI_ADDED_FAT_SAT, PHDI_ADDED_SUGAR)
}
PHDI_V2(NHANES_20032004)
View(PHDI_VALIDATION)
# Score calculation for PHDI
PHDI_V2 = function(SERV_DATA, RESPONDENTID, GENDER, TOTALKCAL_PHDI, WGRAIN_SERV_PHDI, STARCHY_VEG_SERV_PHDI, VEG_SERV_PHDI, FRT_SERV_PHDI, DAIRY_SERV_PHDI, REDPROC_MEAT_SERV_PHDI, POULTRY_SERV_PHDI, EGG_SERV_PHDI, FISH_SERV_PHDI, NUTS_SERV_PHDI, LEGUMES_SERV_PHDI, SOY_SERV_PHDI, ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, ADDED_SUGAR_SERV_PHDI) {
## Create variables and functions needed for PHDI calculation
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5
PHDI_MIN_WGRAIN_F_SERV = 0
PHDI_MAX_WGRAIN_F_SERV = 75
PHDI_MIN_WGRAIN_M_SERV = 0
PHDI_MAX_WGRAIN_M_SERV = 90
PHDI_MIN_STARCHY_VEG_SERV = 200
PHDI_MAX_STARCHY_VEG_SERV = 50
PHDI_MIN_VEG_SERV = 0
PHDI_MAX_VEG_SERV = 300
PHDI_MIN_FRT_SERV = 0
PHDI_MAX_FRT_SERV = 200
PHDI_MIN_DAIRY_SERV = 1000
PHDI_MAX_DAIRY_SERV = 250
PHDI_MIN_REDPROC_MEAT_SERV = 100
PHDI_MAX_REDPROC_MEAT_SERV = 14
PHDI_MIN_POULTRY_SERV = 100
PHDI_MAX_POULTRY_SERV = 29
PHDI_MIN_EGG_SERV = 120
PHDI_MAX_EGG_SERV = 13
PHDI_MIN_FISH_SERV = 0
PHDI_MAX_FISH_SERV = 28
PHDI_MIN_NUTS_SERV = 0
PHDI_MAX_NUTS_SERV = 50
PHDI_MIN_LEGUMES_SERV = 0
PHDI_MAX_LEGUMES_SERV = 100
PHDI_MIN_SOY_SERV = 0
PHDI_MAX_SOY_SERV = 50
PHDI_MIN_ADDED_FAT_UNSAT_SERV = 3.5
PHDI_MAX_ADDED_FAT_UNSAT_SERV = 21
PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV = 10
PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV = 0
PHDI_MIN_ADDED_SUGAR_SERV = 25
PHDI_MAX_ADDED_SUGAR_SERV = 5
SCORE_HEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv <= min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_UNHEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
## update the serving size of ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, and ADDED_SUGAR_SERV_PHDI to % kcal
SERV_DATA = SERV_DATA %>%
mutate(
### 1 gram of fat = 9 kcal. 1 gram of carbohydrate = 4 kcal. Multiply by 100 to get percentage
ADDED_FAT_UNSAT_SERV_PHDI = (ADDED_FAT_UNSAT_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_FAT_SAT_TRANS_SERV_PHDI = (ADDED_FAT_SAT_TRANS_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_SUGAR_SERV_PHDI = (ADDED_SUGAR_SERV_PHDI * 4 / TOTALKCAL_PHDI) * 100
)
## PHDI calculation
SERV_DATA %>%
dplyr::mutate(
RESPONDENTID = RESPONDENTID,
GENDER = GENDER,
TOTALKCAL_PHDI = TOTALKCAL_PHDI,
PHDI_WGRAIN = case_when(
# GENDER = 2 is female
GENDER == 2 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MAX,
GENDER == 2 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_F_SERV ~ PHDI_MIN,
GENDER == 2 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_F_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_F_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_F_SERV - PHDI_MIN_WGRAIN_F_SERV),
GENDER == 1 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MAX,
GENDER == 1 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_M_SERV ~ PHDI_MIN,
GENDER == 1 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_M_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_M_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_M_SERV - PHDI_MIN_WGRAIN_M_SERV),
),
PHDI_STARCHY_VEG = SCORE_UNHEALTHY(STARCHY_VEG_SERV_PHDI, PHDI_MIN_STARCHY_VEG_SERV, PHDI_MAX_STARCHY_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_VEG = SCORE_HEALTHY(VEG_SERV_PHDI, PHDI_MIN_VEG_SERV, PHDI_MAX_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FRT = SCORE_HEALTHY(FRT_SERV_PHDI, PHDI_MIN_FRT_SERV, PHDI_MAX_FRT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_DAIRY = SCORE_UNHEALTHY(DAIRY_SERV_PHDI, PHDI_MIN_DAIRY_SERV, PHDI_MAX_DAIRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_REDPROC_MEAT = SCORE_UNHEALTHY(REDPROC_MEAT_SERV_PHDI, PHDI_MIN_REDPROC_MEAT_SERV, PHDI_MAX_REDPROC_MEAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_POULTRY = SCORE_UNHEALTHY(POULTRY_SERV_PHDI, PHDI_MIN_POULTRY_SERV, PHDI_MAX_POULTRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_EGG = SCORE_UNHEALTHY(EGG_SERV_PHDI, PHDI_MIN_EGG_SERV, PHDI_MAX_EGG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FISH = SCORE_HEALTHY(FISH_SERV_PHDI, PHDI_MIN_FISH_SERV, PHDI_MAX_FISH_SERV, PHDI_MIN, PHDI_MAX),
PHDI_NUTS = SCORE_HEALTHY(NUTS_SERV_PHDI, PHDI_MIN_NUTS_SERV, PHDI_MAX_NUTS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_LEGUMES = SCORE_HEALTHY(LEGUMES_SERV_PHDI, PHDI_MIN_LEGUMES_SERV, PHDI_MAX_LEGUMES_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_SOY = SCORE_HEALTHY(SOY_SERV_PHDI, PHDI_MIN_SOY_SERV, PHDI_MAX_SOY_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_ADDED_FAT_UNSAT = SCORE_HEALTHY(ADDED_FAT_UNSAT_SERV_PHDI, PHDI_MIN_ADDED_FAT_UNSAT_SERV, PHDI_MAX_ADDED_FAT_UNSAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_FAT_SAT = SCORE_UNHEALTHY(ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV, PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_SUGAR = SCORE_UNHEALTHY(ADDED_SUGAR_SERV_PHDI, PHDI_MIN_ADDED_SUGAR_SERV, PHDI_MAX_ADDED_SUGAR_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ALL = PHDI_WGRAIN + PHDI_STARCHY_VEG + PHDI_VEG + PHDI_FRT + PHDI_DAIRY + PHDI_REDPROC_MEAT + PHDI_POULTRY + PHDI_EGG + PHDI_FISH + PHDI_NUTS + PHDI_LEGUMES + PHDI_SOY + PHDI_ADDED_FAT_UNSAT + PHDI_ADDED_FAT_SAT + PHDI_ADDED_SUGAR
) %>%
dplyr::select(RESPONDENTID, GENDER, PHDI_ALL, TOTALKCAL_PHDI, PHDI_WGRAIN, PHDI_STARCHY_VEG, PHDI_VEG, PHDI_FRT, PHDI_DAIRY, PHDI_REDPROC_MEAT, PHDI_POULTRY, PHDI_EGG, PHDI_FISH, PHDI_NUTS, PHDI_LEGUMES, PHDI_SOY, PHDI_ADDED_FAT_UNSAT, PHDI_ADDED_FAT_SAT, PHDI_ADDED_SUGAR)
}
PHDI_V2 = function(SERV_DATA, RESPONDENTID, GENDER, TOTALKCAL_PHDI, WGRAIN_SERV_PHDI, STARCHY_VEG_SERV_PHDI, VEG_SERV_PHDI, FRT_SERV_PHDI, DAIRY_SERV_PHDI, REDPROC_MEAT_SERV_PHDI, POULTRY_SERV_PHDI, EGG_SERV_PHDI, FISH_SERV_PHDI, NUTS_SERV_PHDI, LEGUMES_SERV_PHDI, SOY_SERV_PHDI, ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, ADDED_SUGAR_SERV_PHDI) {
## Create variables and functions needed for PHDI calculation
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5
PHDI_MIN_WGRAIN_F_SERV = 0
PHDI_MAX_WGRAIN_F_SERV = 75
PHDI_MIN_WGRAIN_M_SERV = 0
PHDI_MAX_WGRAIN_M_SERV = 90
PHDI_MIN_STARCHY_VEG_SERV = 200
PHDI_MAX_STARCHY_VEG_SERV = 50
PHDI_MIN_VEG_SERV = 0
PHDI_MAX_VEG_SERV = 300
PHDI_MIN_FRT_SERV = 0
PHDI_MAX_FRT_SERV = 200
PHDI_MIN_DAIRY_SERV = 1000
PHDI_MAX_DAIRY_SERV = 250
PHDI_MIN_REDPROC_MEAT_SERV = 100
PHDI_MAX_REDPROC_MEAT_SERV = 14
PHDI_MIN_POULTRY_SERV = 100
PHDI_MAX_POULTRY_SERV = 29
PHDI_MIN_EGG_SERV = 120
PHDI_MAX_EGG_SERV = 13
PHDI_MIN_FISH_SERV = 0
PHDI_MAX_FISH_SERV = 28
PHDI_MIN_NUTS_SERV = 0
PHDI_MAX_NUTS_SERV = 50
PHDI_MIN_LEGUMES_SERV = 0
PHDI_MAX_LEGUMES_SERV = 100
PHDI_MIN_SOY_SERV = 0
PHDI_MAX_SOY_SERV = 50
PHDI_MIN_ADDED_FAT_UNSAT_SERV = 3.5
PHDI_MAX_ADDED_FAT_UNSAT_SERV = 21
PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV = 10
PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV = 0
PHDI_MIN_ADDED_SUGAR_SERV = 25
PHDI_MAX_ADDED_SUGAR_SERV = 5
SCORE_HEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv <= min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_UNHEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
## update the serving size of ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, and ADDED_SUGAR_SERV_PHDI to % kcal
SERV_DATA = SERV_DATA %>%
mutate(
### 1 gram of fat = 9 kcal. 1 gram of carbohydrate = 4 kcal. Multiply by 100 to get percentage
ADDED_FAT_UNSAT_SERV_PHDI = (ADDED_FAT_UNSAT_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_FAT_SAT_TRANS_SERV_PHDI = (ADDED_FAT_SAT_TRANS_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_SUGAR_SERV_PHDI = (ADDED_SUGAR_SERV_PHDI * 4 / TOTALKCAL_PHDI) * 100
)
## PHDI calculation
SERV_DATA %>%
dplyr::mutate(
RESPONDENTID = RESPONDENTID,
GENDER = GENDER,
TOTALKCAL_PHDI = TOTALKCAL_PHDI,
PHDI_WGRAIN = case_when(
# GENDER = 2 is female
GENDER == 2 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MAX,
GENDER == 2 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_F_SERV ~ PHDI_MIN,
GENDER == 2 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_F_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_F_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_F_SERV - PHDI_MIN_WGRAIN_F_SERV),
GENDER == 1 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MAX,
GENDER == 1 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_M_SERV ~ PHDI_MIN,
GENDER == 1 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_M_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_M_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_M_SERV - PHDI_MIN_WGRAIN_M_SERV),
),
PHDI_STARCHY_VEG = SCORE_UNHEALTHY(STARCHY_VEG_SERV_PHDI, PHDI_MIN_STARCHY_VEG_SERV, PHDI_MAX_STARCHY_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_VEG = SCORE_HEALTHY(VEG_SERV_PHDI, PHDI_MIN_VEG_SERV, PHDI_MAX_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FRT = SCORE_HEALTHY(FRT_SERV_PHDI, PHDI_MIN_FRT_SERV, PHDI_MAX_FRT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_DAIRY = SCORE_UNHEALTHY(DAIRY_SERV_PHDI, PHDI_MIN_DAIRY_SERV, PHDI_MAX_DAIRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_REDPROC_MEAT = SCORE_UNHEALTHY(REDPROC_MEAT_SERV_PHDI, PHDI_MIN_REDPROC_MEAT_SERV, PHDI_MAX_REDPROC_MEAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_POULTRY = SCORE_UNHEALTHY(POULTRY_SERV_PHDI, PHDI_MIN_POULTRY_SERV, PHDI_MAX_POULTRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_EGG = SCORE_UNHEALTHY(EGG_SERV_PHDI, PHDI_MIN_EGG_SERV, PHDI_MAX_EGG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FISH = SCORE_HEALTHY(FISH_SERV_PHDI, PHDI_MIN_FISH_SERV, PHDI_MAX_FISH_SERV, PHDI_MIN, PHDI_MAX),
PHDI_NUTS = SCORE_HEALTHY(NUTS_SERV_PHDI, PHDI_MIN_NUTS_SERV, PHDI_MAX_NUTS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_LEGUMES = SCORE_HEALTHY(LEGUMES_SERV_PHDI, PHDI_MIN_LEGUMES_SERV, PHDI_MAX_LEGUMES_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_SOY = SCORE_HEALTHY(SOY_SERV_PHDI, PHDI_MIN_SOY_SERV, PHDI_MAX_SOY_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_ADDED_FAT_UNSAT = SCORE_HEALTHY(ADDED_FAT_UNSAT_SERV_PHDI, PHDI_MIN_ADDED_FAT_UNSAT_SERV, PHDI_MAX_ADDED_FAT_UNSAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_FAT_SAT = SCORE_UNHEALTHY(ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV, PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_SUGAR = SCORE_UNHEALTHY(ADDED_SUGAR_SERV_PHDI, PHDI_MIN_ADDED_SUGAR_SERV, PHDI_MAX_ADDED_SUGAR_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ALL = PHDI_WGRAIN + PHDI_STARCHY_VEG + PHDI_VEG + PHDI_FRT + PHDI_DAIRY + PHDI_REDPROC_MEAT + PHDI_POULTRY + PHDI_EGG + PHDI_FISH + PHDI_NUTS + PHDI_LEGUMES + PHDI_SOY + PHDI_ADDED_FAT_UNSAT + PHDI_ADDED_FAT_SAT + PHDI_ADDED_SUGAR
) %>%
dplyr::select(RESPONDENTID, GENDER, PHDI_ALL, TOTALKCAL_PHDI, PHDI_WGRAIN, PHDI_STARCHY_VEG, PHDI_VEG, PHDI_FRT, PHDI_DAIRY, PHDI_REDPROC_MEAT, PHDI_POULTRY, PHDI_EGG, PHDI_FISH, PHDI_NUTS, PHDI_LEGUMES, PHDI_SOY, PHDI_ADDED_FAT_UNSAT, PHDI_ADDED_FAT_SAT, PHDI_ADDED_SUGAR)
}
PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI)
print(n = 20)
print(PHDI_V2, n = 20)
print(PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI), n = 26)
View(PHDI_V2)
print(PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
+               PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
+               PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
+               PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
+               PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI), n = 26)
print
View(NHANES_20032004)
View(NHANES_20032004)
NHANES_20032004[["NUTRIENT_IND"]][["DR1IFDCD"]]
NHANES_20032004[["WJFRT"]][["Description"]]
NHANES_20032004[["WJFRT"]][["ModCode"]]
NHANES_20032004[["WJFRT"]][["WHOLEFRT"]]
print(PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI), n = 26)
View(NHANES_20032004)
#max_score = 140
#DEMO = Demographics
#NUTRIENT = dietary interview,total nutrient intakes, 1st day
#NUTRIENT_IND = dietary interview, individual foods, 1st day
#MPRED_PER_100_GRAM =
knitr::kable(head(NHANES_20032004$NUTRIENT))
install.packages("foreign")
library(foreign)
library(ggplot2); theme_set(theme_bw())
library(pastecs)
library(leaflet)
library(ggpubr)
library(ggfortify)
library(GGally)
library(car)
library(effects)
library(emmeans)
library(MuMIn)
library(dietaryindex)
library(dplyr)
library(haven)
library(readr)
# Loading dependency packages first can help avoid the namespace conflict if you want to use dplyr
# by yourself later in addition to the internal use of dplyr within the diataryindex package
library(dietaryindex)
load("NHANES_20032004.rda")
knitr::kable(head(NHANES_20032004$NUTRIENT))
data("PHDI_VALIDATION")
PHDI_V2 = function(SERV_DATA, RESPONDENTID, GENDER, TOTALKCAL_PHDI, WGRAIN_SERV_PHDI, STARCHY_VEG_SERV_PHDI, VEG_SERV_PHDI,
FRT_SERV_PHDI, DAIRY_SERV_PHDI, REDPROC_MEAT_SERV_PHDI, POULTRY_SERV_PHDI, EGG_SERV_PHDI, FISH_SERV_PHDI,
NUTS_SERV_PHDI, LEGUMES_SERV_PHDI, SOY_SERV_PHDI, ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI,
ADDED_SUGAR_SERV_PHDI) {
## Create variables and functions needed for PHDI calculation
PHDI_MIN = 0
PHDI_MAX = 10
PHDI_MAX_2 = 5
PHDI_MIN_WGRAIN_F_SERV = 0
PHDI_MAX_WGRAIN_F_SERV = 75
PHDI_MIN_WGRAIN_M_SERV = 0
PHDI_MAX_WGRAIN_M_SERV = 90
PHDI_MIN_STARCHY_VEG_SERV = 200
PHDI_MAX_STARCHY_VEG_SERV = 50
PHDI_MIN_VEG_SERV = 0
PHDI_MAX_VEG_SERV = 300
PHDI_MIN_FRT_SERV = 0
PHDI_MAX_FRT_SERV = 200
PHDI_MIN_DAIRY_SERV = 1000
PHDI_MAX_DAIRY_SERV = 250
PHDI_MIN_REDPROC_MEAT_SERV = 100
PHDI_MAX_REDPROC_MEAT_SERV = 14
PHDI_MIN_POULTRY_SERV = 100
PHDI_MAX_POULTRY_SERV = 29
PHDI_MIN_EGG_SERV = 120
PHDI_MAX_EGG_SERV = 13
PHDI_MIN_FISH_SERV = 0
PHDI_MAX_FISH_SERV = 28
PHDI_MIN_NUTS_SERV = 0
PHDI_MAX_NUTS_SERV = 50
PHDI_MIN_LEGUMES_SERV = 0
PHDI_MAX_LEGUMES_SERV = 100
PHDI_MIN_SOY_SERV = 0
PHDI_MAX_SOY_SERV = 50
PHDI_MIN_ADDED_FAT_UNSAT_SERV = 3.5
PHDI_MAX_ADDED_FAT_UNSAT_SERV = 21
PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV = 10
PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV = 0
PHDI_MIN_ADDED_SUGAR_SERV = 25
PHDI_MAX_ADDED_SUGAR_SERV = 5
SCORE_HEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= max_serv ~ max_score,
actual_serv <= min_serv ~ min_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
SCORE_UNHEALTHY = function(actual_serv, min_serv, max_serv, min_score, max_score) {
case_when(
actual_serv >= min_serv ~ min_score,
actual_serv <= max_serv ~ max_score,
TRUE ~ min_score + (actual_serv - min_serv) * max_score / (max_serv - min_serv)
)
}
## update the serving size of ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, and ADDED_SUGAR_SERV_PHDI to % kcal
SERV_DATA = SERV_DATA %>%
mutate(
### 1 gram of fat = 9 kcal. 1 gram of carbohydrate = 4 kcal. Multiply by 100 to get percentage
ADDED_FAT_UNSAT_SERV_PHDI = (ADDED_FAT_UNSAT_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_FAT_SAT_TRANS_SERV_PHDI = (ADDED_FAT_SAT_TRANS_SERV_PHDI * 9 / TOTALKCAL_PHDI) * 100,
ADDED_SUGAR_SERV_PHDI = (ADDED_SUGAR_SERV_PHDI * 4 / TOTALKCAL_PHDI) * 100
)
## PHDI calculation
SERV_DATA %>%
dplyr::mutate(
RESPONDENTID = RESPONDENTID,
GENDER = GENDER,
TOTALKCAL_PHDI = TOTALKCAL_PHDI,
PHDI_WGRAIN = case_when(
# GENDER = 2 is female
GENDER == 2 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MAX,
GENDER == 2 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_F_SERV ~ PHDI_MIN,
GENDER == 2 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_F_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_F_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_F_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_F_SERV - PHDI_MIN_WGRAIN_F_SERV),
GENDER == 1 & WGRAIN_SERV_PHDI >= PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MAX,
GENDER == 1 & WGRAIN_SERV_PHDI <= PHDI_MIN_WGRAIN_M_SERV ~ PHDI_MIN,
GENDER == 1 & WGRAIN_SERV_PHDI > PHDI_MIN_WGRAIN_M_SERV & WGRAIN_SERV_PHDI < PHDI_MAX_WGRAIN_M_SERV ~ PHDI_MIN + (WGRAIN_SERV_PHDI - PHDI_MIN_WGRAIN_M_SERV) * PHDI_MAX / (PHDI_MAX_WGRAIN_M_SERV - PHDI_MIN_WGRAIN_M_SERV),
),
PHDI_STARCHY_VEG = SCORE_UNHEALTHY(STARCHY_VEG_SERV_PHDI, PHDI_MIN_STARCHY_VEG_SERV, PHDI_MAX_STARCHY_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_VEG = SCORE_HEALTHY(VEG_SERV_PHDI, PHDI_MIN_VEG_SERV, PHDI_MAX_VEG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FRT = SCORE_HEALTHY(FRT_SERV_PHDI, PHDI_MIN_FRT_SERV, PHDI_MAX_FRT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_DAIRY = SCORE_UNHEALTHY(DAIRY_SERV_PHDI, PHDI_MIN_DAIRY_SERV, PHDI_MAX_DAIRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_REDPROC_MEAT = SCORE_UNHEALTHY(REDPROC_MEAT_SERV_PHDI, PHDI_MIN_REDPROC_MEAT_SERV, PHDI_MAX_REDPROC_MEAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_POULTRY = SCORE_UNHEALTHY(POULTRY_SERV_PHDI, PHDI_MIN_POULTRY_SERV, PHDI_MAX_POULTRY_SERV, PHDI_MIN, PHDI_MAX),
PHDI_EGG = SCORE_UNHEALTHY(EGG_SERV_PHDI, PHDI_MIN_EGG_SERV, PHDI_MAX_EGG_SERV, PHDI_MIN, PHDI_MAX),
PHDI_FISH = SCORE_HEALTHY(FISH_SERV_PHDI, PHDI_MIN_FISH_SERV, PHDI_MAX_FISH_SERV, PHDI_MIN, PHDI_MAX),
PHDI_NUTS = SCORE_HEALTHY(NUTS_SERV_PHDI, PHDI_MIN_NUTS_SERV, PHDI_MAX_NUTS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_LEGUMES = SCORE_HEALTHY(LEGUMES_SERV_PHDI, PHDI_MIN_LEGUMES_SERV, PHDI_MAX_LEGUMES_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_SOY = SCORE_HEALTHY(SOY_SERV_PHDI, PHDI_MIN_SOY_SERV, PHDI_MAX_SOY_SERV, PHDI_MIN, PHDI_MAX_2),
PHDI_ADDED_FAT_UNSAT = SCORE_HEALTHY(ADDED_FAT_UNSAT_SERV_PHDI, PHDI_MIN_ADDED_FAT_UNSAT_SERV, PHDI_MAX_ADDED_FAT_UNSAT_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_FAT_SAT = SCORE_UNHEALTHY(ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_MIN_ADDED_FAT_SAT_TRANS_SERV, PHDI_MAX_ADDED_FAT_SAT_TRANS_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ADDED_SUGAR = SCORE_UNHEALTHY(ADDED_SUGAR_SERV_PHDI, PHDI_MIN_ADDED_SUGAR_SERV, PHDI_MAX_ADDED_SUGAR_SERV, PHDI_MIN, PHDI_MAX),
PHDI_ALL = PHDI_WGRAIN + PHDI_STARCHY_VEG + PHDI_VEG + PHDI_FRT + PHDI_DAIRY + PHDI_REDPROC_MEAT + PHDI_POULTRY + PHDI_EGG + PHDI_FISH + PHDI_NUTS + PHDI_LEGUMES + PHDI_SOY + PHDI_ADDED_FAT_UNSAT + PHDI_ADDED_FAT_SAT + PHDI_ADDED_SUGAR
) %>%
dplyr::select(RESPONDENTID, GENDER, PHDI_ALL, TOTALKCAL_PHDI, PHDI_WGRAIN, PHDI_STARCHY_VEG, PHDI_VEG, PHDI_FRT, PHDI_DAIRY, PHDI_REDPROC_MEAT, PHDI_POULTRY, PHDI_EGG, PHDI_FISH, PHDI_NUTS, PHDI_LEGUMES, PHDI_SOY, PHDI_ADDED_FAT_UNSAT, PHDI_ADDED_FAT_SAT, PHDI_ADDED_SUGAR)
}
print(PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI), n = 26)
print(PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI), n = 26)
#year2013_triglyc
triglyD <- read.xport("~/Downloads/TRIGLY_H.XPT")
sum(is.na(triglyD)) #814
summary(triglyD) # relative big ranges
round(stat.desc(triglyD, norm=T),2) #no normal distribution when looking at normtest.p values
hist(triglyD$LBDLDL)
PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI)
print(PHDI_V2(PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI,
PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI,
PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI,
PHDI_VALIDATION$FISH_SERV_PHDI,PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI,
PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI), n = 26)
str(MPED_PER_100_GRAM)
str(NHANES_20032004$MPED_PER_100_GRAM)
load("NHANES_20052006.rda")
NHANES_20052006$FPED_IND
View(NHANES_20052006)
str(NHANES_20052006$FPED)
load(NHANES_20052006)
setwd("~/Desktop/Master_thesis")
load(NHANES_20052006)
load(NHANES_20052006)
library(dietaryindex)
setwd("~/Desktop/Master_thesis")
load(NHANES_20052006)
library(dplyr)
library(haven)
library(readr)
# Loading dependency packages first can help avoid the namespace conflict if you want to use dplyr
# by yourself later in addition to the internal use of dplyr within the diataryindex package
library(dietaryindex)
setwd("~/Desktop/Master_thesis")
load("NHANES_20032004.rda")
load("NHANES_20052006.rda")
library(dietaryindex)
setwd("~/Desktop/Master_thesis")
load("NHANES_20052006.rda")
load("NHANES_20052006.rda")
load("NHANES_20052006.rda")
install.packages("foreign")
install.packages("foreign")
library(foreign)
library(ggplot2); theme_set(theme_bw())
library(pastecs)
library(leaflet)
library(ggpubr)
library(ggfortify)
library(GGally)
library(car)
library(effects)
library(emmeans)
library(MuMIn)
library(dietaryindex)
install.packages("devtools") #If you don't have "devtools" installed already
devtools::install_github("jamesjiadazhan/dietaryindex") # Install the package from GitHub
library(dplyr)
library(haven)
library(readr)
setwd("~/Desktop/Master_thesis")
load("NHANES_20052006.rda")
setwd("~/Desktop/Master_thesis")
load("NHANES_20052006.rda")
library(devtools)
setwd("~/Desktop/Master_thesis")
library(emmeans)
library(devtools)
setwd("~/Desktop/Master_thesis")
load("NHANES_20052006.rda")
install.packages("foreign")
library(foreign)
library(ggplot2); theme_set(theme_bw())
library(pastecs)
library(leaflet)
library(ggpubr)
library(ggfortify)
library(GGally)
library(car)
library(effects)
library(emmeans)
library(MuMIn)
library(dietaryindex)
install.packages("devtools") #If you don't have "devtools" installed already
install.packages("devtools")
devtools::install_github("jamesjiadazhan/dietaryindex") # Install the package from GitHub
library(dplyr)
library(haven)
library(readr)
setwd("~/Desktop/Master_thesis")
load("NHANES_20032004.rda")
load("NHANES_20052006.rda")
library(dietaryindex)
library(emmeans)
library(devtools)
devtools::install_github("jamesjiadazhan/dietaryindex") # Install the package from GitHub
setwd("~/Desktop/Master_thesis/NHANES_combined_Google")
